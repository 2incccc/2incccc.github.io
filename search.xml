<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OSPF 协议原理</title>
      <link href="/2025/02/19/ospf-scratch/"/>
      <url>/2025/02/19/ospf-scratch/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="OSPF-优点">OSPF 优点</h3><ul><li>支持 CIDR，路由聚合更灵活</li><li>采用组播形式收发报文，减少对非 ospf 路由器的影响<ul><li>对于需要洪范的信息，目标 ip 采用 224.0.0.0/24 内的，（5/6），就实现只发向 ospf 路由器</li></ul></li><li>负载分担</li><li>报文加密</li></ul><h3 id="基础概念">基础概念</h3><ul><li>Router ID<ul><li>路由器标号</li><li>可手动配置</li><li>从 loopback 地址自动获取</li></ul></li><li>链路状态<ul><li>对接口之间的关系的描述</li><li>接口的信息<ul><li>IP 地址</li><li>掩码</li><li>网络类型</li><li>邻居</li></ul></li></ul></li><li>COST<ul><li>cost 是接口的 cost，因为只有接口才有带宽</li><li>链路通过的接口相加得到最终的接口</li></ul></li><li>报文类型<ul><li>Hello 建立邻居关系</li><li>DD 描述 LSDB 摘要</li><li>LSR 请求 LSA 的更新</li><li>LSU 更新 LSA</li><li>LSAck 确认收到</li></ul></li><li>LSA 类型<ul><li>Type1 Router-LSA<ul><li>描述单个设备的链路状态与开销</li><li>其实只与<strong>接口</strong>相关</li><li>Type1 的 LSA 内可以包含多个链路的信息，但是必须是属于一个区域的，因为 Type1 的 lsa 只在区域内洪范</li><li>Type1 的 1 是指链路状态类型</li><li>链路本身也有类型，和网络类型相关</li></ul></li><li>Type2 Network-LSA<ul><li>由 DR 产生，描述本网段的链路状态</li><li>用于 MA 网络，因为路由器的链路都是和 DR 的，不知道其他信息</li><li>重点描述 <strong>Router ID，拓扑关系</strong></li></ul></li><li>Type3 Network-summary LSA<ul><li>跟上一个有点类似，但是是在区域边界</li><li>这时候会涉及路由聚合</li><li>向另一个网络描述</li><li>实际上是在区域内 D 算法运行过后进行的</li><li>为防止回环，所有区域必须和骨干区相连</li></ul></li><li>Type4 ASBR summary<ul><li>描述从 abr 到 asbr 的路由，告知给其他相关区域</li><li>最先由和 asbr 同区域的 abr 开始洪范</li><li>abr 到 asbr 之间的路径已经计算完成，已经得到最短的cost</li><li>一旦 asbr 执行引入外部路由，R4 就宣告自己是 asbr，通过 Type 4 描述这个asbr</li></ul></li><li>Type5 external<ul><li>从 asbr 到外部的路由，告知到所有的区域</li><li>不包括 stub，是为了避免路由的复杂</li></ul></li><li>Type7<ul><li>同上，但是设了一个特殊情况，仅在 nssa 区域传播</li></ul></li><li>Type9/10/11<ul><li>9:在接口所在网段范围内传播</li><li>10:在区域内传播</li><li>11:在自治域传播</li></ul></li></ul></li><li>Stub 区域和 NSSA 区域<ul><li>避免路由表过大，LSA占用过多带宽，对外部路由进行了限制</li><li>NSSA 区域允许了 Type 7 lsa，特例</li><li>Stub 隔绝 AS，Totally Stub 隔绝 Area</li><li>翻译：存根区域  Not So Stubby Area</li><li>Stub 区域主要配置在 AS 边界，只有一个 ABR 的非骨干区域</li><li>以缺省路由代替外部路由</li></ul></li><li>路由器类型<ul><li>Internal Router</li><li>Area Border Router</li><li>Backbone Router</li><li>AS Boundary Router</li></ul></li><li>路由类型<ul><li>Intra 区域内</li><li>Inter 区域间</li><li>Type 1 External 不那么远的路由</li><li>Type 2 External 远的路由，不考虑到 asbr 的距离</li></ul></li><li>支持的网络类型<ul><li>广播类型 Broadcast Multi Access BMA</li><li>非广播 None-BMA</li><li>点到点</li><li>点到多点</li><li><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/1740045062381Pasted%20image%2020250217153625_%E5%89%AF%E6%9C%AC.png"                        alt="1740045062381Pasted image 20250217153625_副本.png"                 ></li></ul></li><li>邻居和邻接<ul><li>邻居指建立 Hello 关系</li><li>邻接指交换完 DD 和 LSA</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> OSPF </tag>
            
            <tag> 算力路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用CMake构建JUCE项目（不使用Projucer）</title>
      <link href="/2025/01/27/juce-cmake/"/>
      <url>/2025/01/27/juce-cmake/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>最近对VST开发比较感兴趣，发现了JUCE框架，但是JUCE提供的 Projucer 大多配合 Xcode 使用，本人更习惯使用VS Code，又了解到 Projucer 其实只是相当于 CMake 构建项目的 GUI 界面，所以在下面介绍一种VS Code 可以使用的 JUCE 项目构建方法。</p></blockquote><p>JUCE 是一个流行的 C++ 框架，广泛用于音频和 GUI 应用的开发。通常，JUCE 提供的 <strong>Projucer</strong> 可用于生成工程文件，但如果你希望使用 <strong>CMake</strong> 直接构建 JUCE 项目，那么本文将指导你如何完成这一过程。</p><h2 id="1-环境准备"><strong>1. 环境准备</strong></h2><p>在开始之前，请确保你的开发环境满足以下条件：</p><ul><li><strong>JUCE 库</strong>：已下载并解压 <a class="link"   href="https://github.com/juce-framework/JUCE" >JUCE 源码<i class="fas fa-external-link-alt"></i></a></li><li><strong>CMake</strong>：已安装 CMake（推荐 3.15 及以上版本）</li><li><strong>编译工具链</strong>：例如 GCC、Clang，或 Windows 上的 Visual Studio 编译工具</li></ul><h2 id="2-创建-CMakeLists-txt"><strong>2. 创建 CMakeLists.txt</strong></h2><p>在你的 JUCE 项目根目录下，创建 <code>CMakeLists.txt</code> 文件，并填入以下内容：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定 CMake 版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义项目名称</span></span><br><span class="line"><span class="keyword">project</span>(MyJUCEApp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 JUCE 库路径（修改为你的 JUCE 目录）</span></span><br><span class="line"><span class="keyword">set</span>(JUCE_DIR /path/to/juce)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入 JUCE</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;JUCE_DIR&#125;</span> JUCE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(MyJUCEApp</span><br><span class="line">    Source/Main.cpp</span><br><span class="line">    Source/MainComponent.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接 JUCE 库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(MyJUCEApp PRIVATE juce::juce_gui_basics juce::juce_audio_basics)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 C++ 标准</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(MyJUCEApp PROPERTIES CXX_STANDARD <span class="number">17</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><strong>修改 <code>JUCE_DIR</code></strong>：请替换 <code>/path/to/juce</code> 为你的实际 JUCE 路径。</li><li><strong>添加更多 JUCE 模块</strong>：如果你的项目需要更多模块，可以在 <code>target_link_libraries</code> 里添加，例如 <code>juce::juce_audio_processors</code>。</li></ul><h2 id="3-配置和编译项目"><strong>3. 配置和编译项目</strong></h2><p>接下来，按照以下步骤编译项目：</p><h3 id="创建构建目录"><strong>创建构建目录</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure><h3 id="运行-CMake-配置"><strong>运行 CMake 配置</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br></pre></td></tr></table></figure><h3 id="编译项目"><strong>编译项目</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build .</span><br></pre></td></tr></table></figure><p>如果一切顺利，你的可执行文件将被生成在 <code>build</code> 目录中。</p><h2 id="4-运行程序"><strong>4. 运行程序</strong></h2><p>编译完成后，你可以直接运行生成的可执行文件，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./MyJUCEApp</span><br></pre></td></tr></table></figure><p>在 Windows 上，你可以双击 <code>MyJUCEApp.exe</code> 或使用命令行运行。</p><h2 id="5-其他配置"><strong>5. 其他配置</strong></h2><h3 id="JUCE-模块选择"><strong>JUCE 模块选择</strong></h3><p>根据你的需求，添加适当的 JUCE 模块，例如：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(MyJUCEApp PRIVATE juce::juce_gui_basics juce::juce_audio_processors)</span><br></pre></td></tr></table></figure><h3 id="平台特定设置"><strong>平台特定设置</strong></h3><p>如果你的项目需要在多个平台上运行，可以添加不同的配置：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    <span class="comment"># Windows-specific settings</span></span><br><span class="line"><span class="keyword">elseif</span>(APPLE)</span><br><span class="line">    <span class="comment"># macOS-specific settings</span></span><br><span class="line"><span class="keyword">elseif</span>(UNIX)</span><br><span class="line">    <span class="comment"># Linux-specific settings</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><h3 id="包含自定义模块"><strong>包含自定义模块</strong></h3><p>如果你有自己的模块，可以使用 <code>add_subdirectory</code> 或 <code>include_directories</code> 进行添加。</p><h2 id="总结"><strong>总结</strong></h2><p>本文介绍了如何使用 CMake 构建 JUCE 项目，完全绕过 Projucer，并展示了如何配置 CMakeLists.txt 以及执行编译。</p><p>如果你在构建过程中遇到问题，欢迎留言讨论！</p>]]></content>
      
      
      <categories>
          
          <category> juce开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> juce </tag>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于飞书的个人工作流分享</title>
      <link href="/2024/07/25/spark-workflow/"/>
      <url>/2024/07/25/spark-workflow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 效率 </tag>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICASSP 2024 论文节选</title>
      <link href="/2024/05/25/icassp-notes/"/>
      <url>/2024/05/25/icassp-notes/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本篇内容主要为实习期间主要学习的几篇论文的笔记内容，在此留档，主要涉及舞蹈生成方向、音频生成等。</p></blockquote><h2 id="huangEnhancingExpressivenessDance2024">@huangEnhancingExpressivenessDance2024</h2><ul><li>title:Enhancing Expressiveness in Dance Generation Via Integrating Frequency and Music Style Information  提高舞蹈动作的表现力</li></ul><h3 id="Abstract">Abstract</h3><ul><li>提出了 <strong>ExpressiveBailando</strong></li><li>针对流派匹配、节拍对齐、舞蹈动态三个方面，提出了衡量表现力 Expressiveness 的要素</li><li>流派/节拍：一个预先训练的音乐模型：Mert</li><li>动态表现：将频率信息纳入 VQ-VAE,Frequency Complemented VQ-VAE FreqVQ-VAE</li></ul><h3 id="Inroduction">Inroduction</h3><ul><li>流派/节拍：意味着舞蹈和音乐的和谐匹配程度</li><li>舞蹈动态相对抽象一点， 和表演方式、动作形式联系起来，主要与动作速度有关</li></ul><h3 id="Methods">Methods</h3><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218391575481721839156997.png"                        alt="17218391575481721839156997.png"                 ></p><p>这张架构图展示了 ExpressiveBailando 的总体结构，具体讲解如下：</p><h4 id="整体概述">整体概述</h4><p>ExpressiveBailando 是一个用于生成高表现力舞蹈的系统。该系统利用音乐特征和舞蹈编码，通过频率补充 VQ-VAE（FreqVQ-VAE）和跨条件 GPT 生成舞蹈。</p><h4 id="各部分的详细解释">各部分的详细解释</h4><ol><li><p><strong>音乐处理部分</strong>：</p><ul><li><strong>MERT</strong>：预训练的音乐模型 MERT 用于提取音乐特征。这些特征包含丰富的音乐风格信息（如类型和节奏）。</li><li><strong>CONV</strong>：卷积层将 MERT 特征下采样。</li><li><strong>Handcrafted music features</strong>：手工制作的音乐特征，如 MFCC（梅尔频率倒谱系数），与 MERT 特征一起作为音乐条件输入。</li></ul></li><li><p><strong>舞蹈处理部分</strong>：</p><ul><li><strong>Upper body FreqVQ-VAE Encoder</strong>：对上半身舞蹈序列进行编码，生成上半身姿态编码。</li><li><strong>Lower body FreqVQ-VAE Encoder</strong>：对下半身舞蹈序列进行编码，生成下半身姿态编码。</li><li><strong>Codebook Zu 和 Z</strong>：分别保存上半身和下半身的编码字典，每个条目代表一个有意义的舞蹈姿态。</li></ul></li><li><p><strong>跨条件 GPT</strong>：</p><ul><li><strong>Positional Embedding</strong>：将上半身姿态编码、下半身姿态编码与音乐条件输入进行位置嵌入。</li><li><strong>Cross-Conditional GPT</strong>：根据输入的音乐和初始姿态编码生成未来的上半身和下半身姿态编码（au 和 al）。</li><li><strong>Top-1 Selection</strong>：选择最有可能的姿态编码。</li></ul></li><li><p><strong>解码部分</strong>：</p><ul><li><strong>Upper body FreqVQ-VAE Decoder</strong>：根据上半身姿态编码生成上半身的舞蹈序列。</li><li><strong>Lower body FreqVQ-VAE Decoder</strong>：根据下半身姿态编码生成下半身的舞蹈序列。</li><li><strong>Future Dance</strong>：最终生成的 未来舞蹈序列，由上半身和下半身的舞蹈序列组成。</li></ul></li></ol><h4 id="工作流程">工作流程</h4><ol><li>音乐输入到 MERT，提取出音乐特征后通过卷积层下采样，与手工制作的音乐特征一起形成音乐条件输入。</li><li>舞蹈输入分别通过上半身和下半身的 FreqVQ-VAE 编码器，生成姿态编码。</li><li>将这些编码与音乐条件输入进行位置嵌入，然后输入跨条件 GPT，生成未来的上半身和下半身姿态编码。</li><li>根据生成的姿态编码，通过 FreqVQ-VAE 解码器生成未来的舞蹈序列。</li></ol><h4 id="目的">目的</h4><p>这种架构通过结合频率信息和音乐风格信息，改进了舞蹈的类型匹配、节奏对齐和舞蹈动态性，增强了生成舞蹈的表现力。</p><h2 id="liExploringMultiModalControl2024">@liExploringMultiModalControl2024</h2><ul><li>title:Exploring Multi-Modal Control in Music-Driven Dance Generation  舞蹈动作的多模态控制</li></ul><h3 id="Abstract-2">Abstract</h3><ul><li>聚焦于生成过程中的<strong>输入信号控制</strong></li><li>一个可以实现多模态控制的生成框架</li><li>控制和生成是分开的</li><li>对于不同类别的信号采取不同的策略</li></ul><h3 id="Inroduction-2">Inroduction</h3><ul><li>在同一个框架实现多模态控制：<ul><li>风格控制</li><li>基于文本的语义控制</li><li>对于关键帧的动作控制</li></ul></li></ul><h3 id="Methods-2">Methods</h3><p>这张图展示了提出的方法的整体流程，分为预训练、协同训练和推理三个阶段。以下是每个阶段的详细解释：</p><h3 id="预训练：VQ-VAE">预训练：VQ-VAE</h3><ol><li><strong>Motion VQ-VAE</strong>：<ul><li>动作片段（Mm 和 Mt）被输入编码器，编码为离散的动作编码（Tokens）。</li><li>解码器将编码解码回原始舞蹈动作。</li><li>通过这种方式，所有动作片段被转换为离散的动作编码，这些编码表示共享的潜在空间。</li></ul></li></ol><h3 id="协同训练：带控制模块的跨模态-GPT">协同训练：带控制模块的跨模态 GPT</h3><ol start="2"><li><p><strong>Text2Motion GPT</strong>：</p><ul><li><strong>CLIP</strong>：用于提取文本特征 T。</li><li><strong>T-Base</strong>：文本 Transformer 基础层，用于处理文本特征。</li><li><strong>Transformer Head Layer</strong>：与音乐到舞蹈 GPT 共享的头层。</li><li><strong>训练目标</strong>：最大化数据分布的对数似然（Lrecon），以预测动作编码。</li></ul></li><li><p><strong>Music2Dance GPT</strong>：</p><ul><li><strong>MLP</strong>：多层感知器，用于提取音乐特征 M。</li><li><strong>M-Base</strong>：音乐 Transformer 基础层，用于处理音乐特征。</li><li><strong>Transformer Head Layer</strong>：与 Text2Motion GPT 共享的头层。</li><li><strong>Genre Control</strong>：类型嵌入网络（GEN）和多类型判别器，用于实现类型控制。</li><li><strong>Mask Attention/Causal Attention</strong>：遮掩注意力/因果注意力机制，用于实现关键帧控制。</li><li><strong>训练目标</strong>：多类型舞蹈判别器（Lgenre），确保生成的舞蹈符合给定的类型。</li></ul></li></ol><h3 id="推理阶段：统一可控舞蹈生成框架">推理阶段：统一可控舞蹈生成框架</h3><ol start="4"><li><strong>统一框架</strong>：<ul><li><strong>Music</strong>：输入音乐，通过 MLP 提取音乐特征 M。</li><li><strong>Genre Control</strong>：通过 GEN 生成类型嵌入 G。</li><li><strong>控制模块</strong>：<ul><li><strong>M-Base</strong>：用于处理音乐特征。</li><li><strong>Text Control Module</strong>：处理文本特征并进行语义控制。</li><li><strong>Mask Attention/Causal Attention</strong>：实现关键帧控制或序列生成。</li></ul></li><li><strong>Transformer Head Layer</strong>：共享的头层，用于处理特征并预测动作编码。</li><li><strong>Decoder</strong>：将预测的动作编码解码为舞蹈序列。</li></ul></li></ol><h3 id="详细流程">详细流程</h3><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218393365511721839336141.png"                        alt="17218393365511721839336141.png"                 ></p><ol><li><p><strong>预训练 Motion VQ-VAE</strong>：</p><ul><li>将舞蹈动作编码为离散的动作编码，通过解码器重建舞蹈。</li></ul></li><li><p><strong>协同训练跨模态 GPT</strong>：</p><ul><li><strong>Text2Motion GPT</strong>：使用 CLIP 提取文本特征，通过 T-Base 处理，并通过共享的 Transformer Head Layer 预测动作编码。</li><li><strong>Music2Dance GPT</strong>：使用 MLP 提取音乐特征，通过 M-Base 处理，并通过共享的 Transformer Head Layer 预测动作编码。</li><li><strong>多模态控制</strong>：<ul><li><strong>文本控制</strong>：融合音乐和文本特征，实现语义控制。</li><li><strong>类型控制</strong>：通过类型嵌入网络和判别器，实现类型控制。</li><li><strong>关键帧控制</strong>：通过遮掩注意力机制，实现关键帧控制。</li></ul></li></ul></li><li><p><strong>推理阶段</strong>：</p><ul><li>输入音乐，通过 MLP 提取音乐特征。</li><li>通过类型嵌入网络生成类型嵌入。</li><li>控制模块处理音乐和文本特征，通过共享的 Transformer Head Layer 预测动作编码。</li><li>通过解码器将预测的动作编码解码为舞蹈序列。</li></ul></li></ol><p>这种方法通过解耦舞蹈生成和控制，确保了生成舞蹈的高质量，同时实现了多模态控制，包括类型控制、语义控制和关键帧控制。</p><h2 id="liuLearningHierarchicalCrossModal2022">liuLearningHierarchicalCrossModal2022</h2><ul><li>Learning Hierarchical Cross-Modal Association for Co-Speech Gesture Generation</li></ul><h3 id="Abstract-3">Abstract</h3><ul><li>研究问题：根据语音生成一致的手势与动作</li><li>提出了 Hierarchical Audio-to-Gesture (HA2G) for co-speech gesture generation</li><li>用于生成协同语音手势的分层音频到手势 (HA2G)</li><li>制定基于音频文本对齐的对比学习策略，以获得更好的音频表示</li></ul><h3 id="Inroduction-3">Inroduction</h3><ul><li>动作和手势在语言交流传达意思中很重要</li><li>传统上，是将语音和动作一一对应下来，效果并不好，更好的是数据驱动的深度学习方法</li><li>两个观察结果：<ul><li>1）不同类型的协同语音手势与不同级别的音频信息相关。例如，隐喻手势与高级语音语义密切相关（例如，在描绘峡谷时，人们会将两只伸出的手分开并说“间隙”），而节拍和音量等低级音频特征则与高级语音语义密切相关。到有节奏的手势。</li><li>2）不同人体部位在协同语音手势中的动态模式并不相同，例如灵活的手指和相对静止的上臂。因此，像以前的研究一样生成整个上半身姿势是不合适的</li></ul></li><li>整个框架包括两个部分，Hierarchical Audio Learner, and the Hierarchical Pose Inferer. 分层音频学习器以及分层姿势推断器</li><li>分层音频学习器：提取分层音频特征并通过对比学习呈现判别性表示。 分层姿势推断器：学习多级特征和人体部位之间的关联。因此，人体姿势以级联方式生成。</li></ul><h3 id="Related-Work">Related Work</h3><ul><li>Human-Centered Audio-Visual Learning：音频-视觉，主要局限在舞蹈生成、面部表情生成中，不如手势生成更复杂</li><li>Human Motion Synthesis：人类动作合成：计算机图形学的重要课题</li><li>Audio/Text-Driven Motion Generation：建议对文本、音频、说话者身份的三模态特征嵌入进行编码，并将它们连接在一起以传递解码器。…</li></ul><h3 id="Approach">Approach</h3><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17023666173131702366616615.png"                        alt="17023666173131702366616615.png"                 ><br>这张流程图描述了一个语音驱动的手势生成框架。这个框架通过学习语音和手势之间的层次化关系来生成与语音同步的手势动作。流程图可以分为几个主要部分，每个部分执行不同的功能：</p><ol><li><strong>Hierarchical Audio Learner（分层音频学习器）</strong>:<ul><li>输入语音（a）和文本（t）。</li><li>通过不同的神经网络层次来提取语音的不同层次的特征（低、中、高）。</li><li>这些特征用于正面和负面样本的对比学习，通过 <code>L_multi</code> 损失函数来优化。</li></ul></li><li><strong>Hierarchical Pose Inferer（分层姿态推断器）</strong>:<ul><li>利用一个编码器 <code>E_ID</code>，它接收视频帧（I）作为输入，提取与身份相关的特征（f_id）。</li><li>这些特征与从 Hierarchical Audio Learner 获得的音频特征一起，通过多个 GRU（门控循环单元）网络层来逐步预测姿态。</li><li>每个 GRU 层负责生成一组特定的姿态细节，这些层次结构预测从粗糙到细粒度的姿态。</li><li>使用 softmax 进行样式采样，以便选择特定的手势样式。</li></ul></li><li><strong>输出</strong>:<ul><li>多个不同层次的预测手势（(\hat{P}^1) 到 (\hat{P}^6)）。</li><li>这些预测被一起优化，以减少与真实手势之间的差异，使用层次性 Huber 损失函数。</li></ul></li><li><strong>损失函数</strong>:<ul><li><code>L_KLD</code> 和 <code>L_style</code> 用于控制生成的手势的多样性和风格。</li><li><code>L_GAN</code>和<code>L_phy</code>可能用于增强手势的自然性和物理合理性。<br>总体而言，该框架的目标是利用文本和语音输入来生成与之对应的、自然流畅的手势动作。这个过程涉及深度学习和神经网络，特别是对比学习和循环神经网络，以模拟人类的手势和动作。</li></ul></li></ol><h2 id="tsengEDGEEditableDance2022">tsengEDGEEditableDance2022</h2><ul><li>EDGE: Editable Dance Generation From Music</li></ul><h3 id="Abstract-4">Abstract</h3><ul><li>可编辑的舞蹈生成方法</li><li>EDGE 使用基于 Transformer 的扩散模型，与强大的音乐特征提取器 Jukebox 配合使用，并赋予非常适合舞蹈的强大编辑功能，包括联合调节和中间处理。</li></ul><h3 id="Inroduction-4">Inroduction</h3><ul><li>先前研究<ul><li>音乐生成舞蹈并不是很能让人满意</li><li>对生成舞蹈的评估往往是有缺陷的</li></ul></li><li>根据输入音乐创建逼真、物理上合理的舞蹈动作</li><li>贡献：<ul><li>基于 Diffusion 的 EDGE 方法</li><li>分析了以前工作的指标，表明不好</li><li>使用新颖的接触一致性损失来消除运动中的脚滑动物理不可信行，引入物理足接触分数</li><li>利用 Jukebox 的音频特征提取</li></ul></li></ul><h3 id="Related-Work-2">Related Work</h3><ul><li>动作生成<ul><li>早期属于运动匹配的范畴，插值进行操作</li><li>深度学习领域，往往会忽略了物理上的真实性</li></ul></li><li>舞蹈生成<ul><li>遵循动作检索范例</li><li>在大量数据集训练</li><li>我们提出一个简单目标训练的单一模型</li></ul></li><li>生成扩散模型<ul><li>生成建模的有效途径</li><li>生成以文本为条件的运动方面</li><li>以音乐为条件，难度更大</li></ul></li></ul><h3 id="Method">Method</h3><ul><li>姿势的建摸：24 个关节，每个关节 6 个自由度，和单独的脚步的建模 24* 6+3=147，每只脚，2 个接触标签，共 151 维度</li><li>扩散框架：<ul><li><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218395275501721839526603.png"                        alt="17218395275501721839526603.png"                 ></li></ul></li><li>辅助损失，四种</li><li>编辑功能， 固定部分帧，推理其他帧</li></ul><h2 id="tsengMusictoDancePoseLearning2024a">tsengMusictoDancePoseLearning2024a</h2><ul><li>Music-to-Dance Poses: Learning to Retrieve Dance Poses from Music  从音乐中检索舞蹈</li></ul><h3 id="Abstract-5">Abstract</h3><p>🔤EDSA 适配器是一种利用编码器-解码器转换的自注意力适配器，可以有效且高效地对大规模预训练音乐模型进行微调，以学习从音乐片段到 3D 人体姿势和形状的投影。🔤</p><ul><li>EDSA 适配器，利用编码器-解码器转换的子注意力适配器，用于微调模型</li><li>将预训练的大规模音乐模型微调为能够将音乐片段投影到3D 人体姿态和形状参数上的模型</li></ul><h3 id="Inroduction-5">Inroduction</h3><p>没有将其看作生成任务，而是看作跨模态的检索任务，输入上一刻动作输出下一刻<br>将预训练的大规模音乐模型微调为能够将音乐片段投影到3D 人体姿态和形状参数上的模型<br>EDSA 适配器，利用编码器-解码器转换的子注意力适配器，用于<strong>微调</strong>模型<br>相当于直接打通了音乐-&gt;动作的过程</p><h3 id="Methods-3">Methods</h3><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218396325471721839631969.png"                        alt="17218396325471721839631969.png"                 ></p><h2 id="xieEnhancingAudioGeneration2024">xieEnhancingAudioGeneration2024</h2><ul><li>Enhancing Audio Generation Diversity with Visual Information<strong>利用视觉信息增强音频生成的多样性</strong></li></ul><h3 id="Abstract-6">Abstract</h3><ul><li>利用视觉信息 指导音频内容的生成</li></ul><h3 id="Inroduction-6">Inroduction</h3><ul><li>由文本生成音频引入，TTA</li><li>DCASE2023 task7 [1] provides a dataset for categorybased audio generation</li><li>问题：训练集的音频比模型生成的更多样，原因是更多隐式的特征无法被学习</li><li>how<ul><li>对训练集音频采用无监督聚类方法，得到更细致的分类</li><li>为体现 audio-vision 对齐，对其对细致的分类使用互联网上的图像，共同输入进模型</li><li>提出了一个新的框架<ul><li>训练过程： 基于训练集无监督聚类，之后自行添加图片作为输入，将 label 和 image 进行 fusion 得到新的输入，然后将对应的音频经过编码器得到了 audio representation, 模型主要学习如何从融合输入预测 represention。此外，需要用训练集音频训练Vocoder</li><li>推理过程，新的融合信息，进入模型得到对应的 represention，然后经过 decoder 得到频谱，然后进入 vocoder 得到音频</li><li><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218397455461721839744690.png"                        alt="17218397455461721839744690.png"                 ></li></ul></li></ul></li></ul><h3 id="Methods-4">Methods</h3><h4 id="Modal-Fusion">Modal Fusion</h4><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218397165481721839715759.png"                        alt="17218397165481721839715759.png"                 ></p><h4 id="Music-Representations">Music Representations</h4><ul><li>VAE</li><li>VQ-VAE</li><li>(所以原理是什么？)</li></ul><h4 id="Token-Prediction">Token Prediction</h4><ul><li>基于自回归的(transformer</li><li>基于扩散的 LDM</li></ul><h3 id="Experimental">Experimental</h3><ul><li>两种框架<ul><li>VAE&amp;LDM</li><li><strong>VQ-VAE&amp;Transformer</strong></li></ul></li></ul><h3 id="Results-and-discussions">Results and discussions</h3><ul><li>评价指标<ul><li>客观<ul><li>Quality: FAD，和参考样本的对比</li><li>Diversity: Mean Squared Distance 均方距离</li></ul></li><li>主观（评测）</li></ul></li></ul><h3 id="Conclusions">Conclusions</h3><ul><li>基于视觉信息，增强音频生成的质量和多样性</li></ul><h2 id="Summary">Summary</h2><ul><li>视觉-&gt;听觉</li><li>单纯基于图片生成音频？</li><li>基于视频生成背景音乐？</li></ul><h2 id="zhuHumanMotionGeneration2023">zhuHumanMotionGeneration2023</h2><ul><li>Human Motion Generation: A Survey 综述</li></ul><h3 id="Abstract-7">Abstract</h3><p>研究范围：基于条件信号（文本、音频、场景）生成人体运动<br>该领域的首次综述</p><h3 id="Inroduction-7">Inroduction</h3><ul><li>生成方法：自回归模型、变分自编码器 (VAE) 、归一化流 、生成对抗网络 (GAN)  和去噪扩散概率模型 (DDPM)</li><li>建模技术的进步，使得数据集收集更加方便</li><li>三个问题（挑战）<ul><li>动作本身是复杂、非线性的，运动机理复杂，视觉上合理性</li><li>要和条件信息相符合一致</li><li>注意一些潜在反应内容的因素</li></ul></li><li><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218398495451721839848955.png"                        alt="17218398495451721839848955.png"                 ></li><li><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218398675481721839866972.png"                        alt="17218398675481721839866972.png"                 ></li><li>章节section梗概<ul><li>2 介绍范围</li><li>3 基础知识介绍</li><li>4-6 介绍总结方法</li></ul></li></ul><h3 id="Preliminaries-预备知识">Preliminaries 预备知识</h3><ul><li><strong>Motion Data Representation</strong><ul><li>基于关节</li><li>基于旋转<ul><li><strong>SMPL</strong></li></ul></li></ul></li><li><strong>Motion Data Collection</strong><ul><li>基于标记的<ul><li>光学标记</li><li>传感器标记（动捕）</li></ul></li><li>不基于标记的<ul><li>借助计算机视觉算法</li></ul></li><li>伪标记<ul><li>通过 estimator 估计后生成</li></ul></li><li>手动打标<ul><li>类似 mmd 的原理</li></ul></li></ul></li><li><strong>Motion Generation Methods</strong><ul><li>基于回归模型的<ul><li>监督学习，从给定条件信号构建目标生成动作</li></ul></li><li><strong>基于生成模型的</strong><ul><li><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218399025491721839902304.png"                        alt="17218399025491721839902304.png"                 ></li><li><strong>Generativa Adversarial Networks 生成对抗网络</strong></li><li><strong>Variational Autoencoders 变分自动编码器</strong></li><li><strong>Normalizing Flows 归一化流</strong></li><li><strong>Diffusion Models 扩散模型</strong></li><li><strong>Motion Graph 运动图</strong></li></ul></li></ul></li></ul><h3 id="Methods-5">Methods</h3><ul><li><strong>Text-Conditioned Motion Generation</strong><ul><li><strong>Action to Motion</strong><ul><li>根据特定的动作类别生成人体动作</li><li>往往擅长但动作的运动，多动作复杂序列比较困难</li></ul></li><li><strong>Text to Motion</strong><ul><li>根据不同的文本描述到更广泛的动作</li></ul></li></ul></li><li><strong>Audio-Conditioned Motion Generation</strong><ul><li><strong>music to dance</strong><ul><li>一种方法是直接基于全监督的回归模型，但是多样性缺乏</li><li>基于生成模型的方法，GAN/diffuion/VAE/运动图</li><li>长时间序列的舞蹈动作生成</li></ul></li><li><strong>Speech to gesture</strong><ul><li>根据语音音频生成上班深动作，聚焦于人的手势，在交流中发挥重要作用</li><li>言语手势存在显著人际差异，没有较好的普遍性</li></ul></li></ul></li><li><strong>Scene-Conditioned Motion Generation</strong><ul><li>生成于场景上下文一致的合理人体运动，是计算机图形学和计算机诗句恶的长期存在的问题。</li><li>除去动态动作，还包括静态姿势</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Dance Generation </tag>
            
            <tag> Motion Generation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典网络架构</title>
      <link href="/2024/03/13/classic-architecture/"/>
      <url>/2024/03/13/classic-architecture/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="多层感知机">多层感知机</h2><h3 id="多层感知机的简洁实现">多层感知机的简洁实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l <span class="comment"># 多层感知机的简洁实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">net = nn.Sequential(nn.Flatten(),</span><br><span class="line">                    nn.Linear(<span class="number">784</span>,<span class="number">256</span>),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Linear(<span class="number">256</span>,<span class="number">10</span>)</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_weights</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.normal_(m.weight, std = <span class="number">0.01</span>)</span><br><span class="line">        </span><br><span class="line">net.apply(init_weights);</span><br><span class="line"></span><br><span class="line">batch_size, lr, num_epochs = <span class="number">256</span>, <span class="number">0.1</span>, <span class="number">10</span></span><br><span class="line">loss = nn.CrossEntropyLoss(reduction=<span class="string">'none'</span>)</span><br><span class="line">trainer = torch.optim.SGD(net.parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)&gt;)</span><br></pre></td></tr></table></figure><h3 id="模型选择、欠拟合和过拟合">模型选择、欠拟合和过拟合</h3><p>训练误差：训练数据集上计算得到的误差<br>泛化误差：（对于其他数据集）在无限多数据样本中模型误差的期望</p><h4 id="模型选择">模型选择</h4><p>训练集：训练模型，获取参数<br>验证集：调整模型超参数，并选取最佳参数<br>测试集：验证模型，训练和验证的过程不能使用测试集</p><p>当训练数据稀缺，采用 K 折交叉验证，分出 K 个子集，进行 K 次训练，每次使用不同的子集作为验证集，其余 K -1 个子集作为训练集</p><h3 id="总结">总结</h3><p>模型容量需要匹配数据复杂度<br>统计机器学习提供数学工具来衡量模型复杂度<br>实际中一般靠观察训练误差和验证误差</p><h2 id="神经网络计算">神经网络计算</h2><h3 id="层和块">层和块</h3><ul><li>一个块可以由许多层组成；一个块可以由许多块组成。</li><li>块可以包含代码。</li><li>块负责大量的内部处理，包括参数初始化和反向传播。</li><li>层和块的顺序连接由 <code>Sequential</code> 块处理。</li></ul><h3 id="参数管理">参数管理</h3><ul><li>访问参数，用于调试、诊断和可视化；</li><li>参数初始化；</li><li>在不同模型组件间共享参数。</li></ul><p>参数是复合的对象，包含属性、值等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nn.init.normal_(m.weight, mean=<span class="number">0</span>, std=<span class="number">0.01</span>) <span class="comment"># 替换函数</span></span><br></pre></td></tr></table></figure><h2 id="CNN-卷积神经网络">CNN 卷积神经网络</h2><p>卷积神经网络（convolutional neural networks，CNN）是机器学习利用自然图像中一些已知结构的创造性方法。</p><h3 id="6-1-从全连接层到卷积">6.1 从全连接层到卷积</h3><p>两个原则：平移不变性、局部性<br><strong>重新考量全连接层</strong>：权重变为四维，输入输出变为矩阵<br><img lazyload="" alt="17059149074721705914906610.png" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17059149074721705914906610.png"></p><h3 id="6-2-图像卷积">6.2 图像卷积</h3><h3 id="6-3-填充和步幅">6.3 填充和步幅</h3><p>假设输入形状为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="7.923ex" height="1.468ex" role="img" focusable="false" viewBox="0 -491 3502 648.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1312.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(2312.7,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></svg></mjx-container>，卷积核形状为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="7.566ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 3344 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1233.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(2233.7,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></svg></mjx-container>，那么输出形状将是(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="26.048ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 11513.4 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1312.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2312.7,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g><g data-mml-node="mo" transform="translate(3546.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4546.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5268.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(6268.9,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="mo" transform="translate(7680.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(8680.7,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="mo" transform="translate(10013.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(11013.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>)。 因此，卷积的输出形状取决于输入形状和卷积核的形状。</p><h4 id="填充">填充</h4><p>填充多少行，输出多多少行<br>通常情况，需要填充 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.725ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6066.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1233.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2233.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2733.7,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msub" transform="translate(3233.7,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="mo" transform="translate(4566.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5566.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> 行，使得输入和输出维度相同，此时，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="7.062ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 3121.6 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1011.3,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g><g data-mml-node="msub" transform="translate(2011.3,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></svg></mjx-container> 通常为奇数（1 3 5）</p><h4 id="步幅">步幅</h4><p>通常为了高效计算或者缩减采样次数</p><h3 id="6-4-多输入多输出通道">6.4 多输入多输出通道</h3><h3 id="6-5-汇聚层">6.5 汇聚层</h3><p>也叫池化层</p><h3 id="6-6-卷积神经网络（LeNet）">6.6 卷积神经网络（LeNet）</h3><p><img lazyload="" alt="17218412095491721841208964.png" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218412095491721841208964.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>), nn.Sigmoid(),</span><br><span class="line">    nn.AvgPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">    nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, kernel_size=<span class="number">5</span>), nn.Sigmoid(),</span><br><span class="line">    nn.AvgPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">    nn.Flatten(),</span><br><span class="line">    nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>), nn.Sigmoid(),</span><br><span class="line">    nn.Linear(<span class="number">120</span>, <span class="number">84</span>), nn.Sigmoid(),</span><br><span class="line">    nn.Linear(<span class="number">84</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="Modern-CNN">Modern CNN</h2><h3 id="深度卷积神经网络-AlexNet">深度卷积神经网络 AlexNet</h3><ul><li>本质上是更深更大的 LeNet</li><li><img lazyload="" alt="17218412675461721841266754.png" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218412675461721841266754.png"></li></ul><h3 id="VGG-使用块的网络">VGG 使用块的网络</h3><ul><li><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17089425816541708942581052.png"></li></ul><h3 id="网络中的网络-NiN">网络中的网络 NiN</h3><ul><li>对每个像素的位置独立使用全连接层</li><li></li></ul><p><img lazyload="" alt="17218412945511721841294162.png" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218412945511721841294162.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nin_block</span>(<span class="params">in_channels, out_channels, kernel_size, strides, padding</span>):</span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">    nn.Conv2d(in_channels, out_channels, kernel_size, strides, padding),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">        nn.Conv2d(out_channels, out_channels, kernel_size=<span class="number">1</span>), nn.ReLU(),</span><br><span class="line">    nn.Conv2d(out_channels, out_channels, kernel_size=<span class="number">1</span>), nn.ReLU())</span><br><span class="line">        </span><br><span class="line">net = nn.Sequential(</span><br><span class="line">    nin_block(<span class="number">1</span>, <span class="number">96</span>, kernel_size=<span class="number">11</span>, strides=<span class="number">4</span>, padding=<span class="number">0</span>),</span><br><span class="line">    nn.MaxPool2d(<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">    nin_block(<span class="number">96</span>, <span class="number">256</span>, kernel_size=<span class="number">5</span>, strides=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">    nn.MaxPool2d(<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">    nin_block(<span class="number">256</span>, <span class="number">384</span>, kernel_size=<span class="number">3</span>, strides=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">    nn.MaxPool2d(<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">    nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line"><span class="comment"># 标签类别数是10</span></span><br><span class="line">    nin_block(<span class="number">384</span>, <span class="number">10</span>, kernel_size=<span class="number">3</span>, strides=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">    nn.AdaptiveAvgPool2d((<span class="number">1</span>, <span class="number">1</span>)),</span><br><span class="line"><span class="comment"># 将四维的输出转成二维的输出,其形状为(批量大小,10)</span></span><br><span class="line">    nn.Flatten())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="残差网络-ResNet">残差网络 ResNet</h3><p>确保新的映射包含原有的映射，防止网络是退化的</p><h2 id="RNN-循环神经网络">RNN 循环神经网络</h2><p>循环神经网络可以很好的处理序列信息</p><h3 id="序列模型">序列模型</h3><ul><li>研究的是序列预测问题：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.537ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10845.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1188,0)"><path data-c="223C" d="M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"></path></g><g data-mml-node="mi" transform="translate(2243.8,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(2994.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(3383.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(4571.9,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(5127.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1139,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6941.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(7386.3,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(8724.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(9169.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(10178.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10567.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g></g></g></svg></mjx-container><ul><li>两个策略：自回归模型和因变量自回归模型</li><li><strong>马尔可夫模型</strong><ul><li>假设当前只跟少数数据相关，简化模型</li></ul></li><li><strong>潜变量模型</strong><ul><li>潜变量概括历史信息</li><li><img lazyload="" alt="17218414365451721841436117.png" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218414365451721841436117.png"></li></ul></li></ul></li></ul><h3 id="文本预处理">文本预处理</h3><ul><li>主要预处理步骤：拆分为次元，建立词表，映射到数字索引<ul><li>tokenize nlp 中最常见的操作</li><li>中文的分词使用 jieba</li></ul></li></ul><h3 id="语言模型和数据集">语言模型和数据集</h3><ul><li>目标：估计联合概率</li><li>面对问题：对文档或者词元序列进行建模<ul><li>通过计数</li><li>常用统计方法：n 元语法，基于马尔可夫的统计模型</li></ul></li><li>随机采样<ul><li>基于随机的偏移量，不重叠、不相邻地划分序列</li><li>corpus, batch_size, num_steps：整个序列、小批量的大小，每一个子序列的长度</li></ul></li><li>顺序分区<ul><li>保证两个相邻的小批量中的子序列在原始序列上也是相邻的</li></ul></li></ul><h3 id="循环神经网络">循环神经网络</h3><p>对于序列模型的神经网络，RNN</p><ul><li>输出、隐变量、观察<ul><li><img lazyload="" alt="17218414645451721841464111.png" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/17218414645451721841464111.png"></li><li>隐变量和观察一起作为自变量，控制输出的隐变量</li><li><strong>o_t ~ h_t</strong></li><li><strong>H_t ~ h_t-1, x_t-1</strong><ul><li>拿掉 h_t-1 退化为 MLP</li></ul></li><li>输出以及隐变量（的计算）<strong>在观察之前</strong></li><li>观察是用于更新下一个单元，相当于观察既是输入也是标签</li><li>有点像因果系统（？），包含了时间信息</li></ul></li><li>困惑度<ul><li>衡量一个语言模型的好坏可以用平均交叉熵</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="27.091ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 11974.1 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(847.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1903.6,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(2767.8,0)"><path data-c="1D6F4" d="M65 0Q58 4 58 11Q58 16 114 67Q173 119 222 164L377 304Q378 305 340 386T261 552T218 644Q217 648 219 660Q224 678 228 681Q231 683 515 683H799Q804 678 806 674Q806 667 793 559T778 448Q774 443 759 443Q747 443 743 445T739 456Q739 458 741 477T743 516Q743 552 734 574T710 609T663 627T596 635T502 637Q480 637 469 637H339Q344 627 411 486T478 341V339Q477 337 477 336L457 318Q437 300 398 265T322 196L168 57Q167 56 188 56T258 56H359Q426 56 463 58T537 69T596 97T639 146T680 225Q686 243 689 246T702 250H705Q726 250 726 239Q726 238 683 123T639 5Q637 1 610 1Q577 0 348 0H65Z"></path></g><g data-mml-node="mo" transform="translate(3796,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mtext" transform="translate(4796.3,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mi" transform="translate(6074.3,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(6577.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6966.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(7876.5,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(8154.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1139,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9968.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(10413.1,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(11585.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li><li>困惑度取指数，来衡量，是平均每次可能选项</li><li>困惑度最好值是 1</li></ul></li><li>梯度剪裁</li><li>RNN 的应用<ul><li>文本生成：一个生多个</li><li>文本分类：多个生一个</li><li>问答、翻译：同时多个生成同时多个，有时间先后</li><li>Tag 生成：对每个词进行生成</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> d2l.ai </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频原理</title>
      <link href="/2023/12/12/video/"/>
      <url>/2023/12/12/video/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="模拟视频基础">模拟视频基础</h2><h3 id="图像扫描">图像扫描</h3><p>扫描：将图像编程顺序传送的电信号的过程，从左至右（行扫描）、从上至下（帧扫描?）</p><h4 id="如何选择行频、帧频（场频）和行数">如何选择行频、帧频（场频）和行数</h4><ol><li>帧频：有连续感-无闪烁感：20-45.8Hz</li><li>行数：Z=620</li><li>行频 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.864ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 4360.1 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mo" transform="translate(1478.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2534.5,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="msub" transform="translate(3257.5,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></g></svg></mjx-container></li><li>带宽：考虑扫描两个像素的时间的倒数，即为最高频率（带宽）</li></ol><h4 id="隔行扫描">隔行扫描</h4><p>减少传输带宽，每次扫描提供 1/2 的行数，每帧被分为两场（奇数/偶数）<br>优势：减少闪烁、降低传输带宽<br>缺点：行间闪烁、视在并行、图像边缘锯齿化等等</p><h3 id="分解力">分解力</h3><p>显示设备所能分辨的图像像素数目、客观指标。<br>视觉特性要求电视系统垂直和水平方向上所能分解的像素尺寸相同。</p><h3 id="视频信号带宽">视频信号带宽</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="30.292ex" height="2.464ex" role="img" focusable="false" viewBox="0 -883.9 13389.2 1088.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(1660.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2716.6,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4911.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(5911.4,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8051.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9107,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1778,0)"></path></g><g data-mml-node="msup" transform="translate(11385,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="msub" transform="translate(12286.5,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></g></svg></mjx-container><br>视频信号的带宽主要由扫描行数 Z 和帧频 fF 决定的,在行数 Z 一定时,可以改变 fF 而达到降低 Δf 的目的。</p><h2 id="基带信号">基带信号</h2><h3 id="兼容彩色电视系统">兼容彩色电视系统</h3><p>传输三基色：YUV<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16982881614001698288160877.png"><br>实现在黑白和彩色电视系统中均能正确传送演示</p><h2 id="数字视频取样">数字视频取样</h2><h3 id="数字化基础">数字化基础</h3><p>三个步骤：采样、量化、编码</p><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16980514262981698051425506.png"></p><h3 id="数字分量视频-ITU-R-601-标准">数字分量视频:ITU-R 601 标准</h3><h4 id="信号彩色空间转换">信号彩色空间转换</h4><p>由 RGB-&gt;Y(R-Y)(B-Y)-&gt;YC_BC_R</p><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16980521052951698052105061.png"></p><p>采用 8bit 量化</p><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16980521792941698052179139.png"></p><h4 id="取样频率">取样频率</h4><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16981289502861698128949148.png"></p><h4 id="子取样格式">子取样格式</h4><hr><h2 id="数字视频压缩技术">数字视频压缩技术</h2><p>压缩方法：无失真（2-5 倍）有失真压缩（5-250 倍）</p><p>无失真方法：游程数据编码和变字长编码</p><p>有失真方法：量化、变化编码、DPCM 编码、运动估计和补偿</p><h3 id="图像的相关性（冗余度）">图像的相关性（冗余度）</h3><p>空间冗余：相邻像素之间的相关性</p><p>时间冗余：前后帧的相似性</p><h4 id="信息熵冗余">信息熵冗余</h4><p>时间 X 的概率为 P(X) <strong>信息量</strong>定义为</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.412ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8579.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(504,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(893,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(1873.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2540.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3596,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4374,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4672,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(5157,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(6070.5,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(6821.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(7210.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(8190.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>信息熵是对所有可能时间的信息量进行平均</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.864ex;" xmlns="http://www.w3.org/2000/svg" width="35.761ex" height="6.784ex" role="img" focusable="false" viewBox="0 -1733 15806.2 2998.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1277,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mn" transform="translate(716,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(2396.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3063.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4119.1,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4883.1,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(504,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(893,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(1873.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mo" transform="translate(7423.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(8479.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="munderover" transform="translate(9423.7,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(407.7,1150) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="mi" transform="translate(11034.4,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(11785.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(12174.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(13154.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(13543.8,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(14047.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(14436.8,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(15417.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>码的冗余定义：</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.608ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7340.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2092.6,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="TeXAtom" transform="translate(473,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3554.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4555,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(5443,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5832,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mn" transform="translate(716,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(6951.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><h3 id="图像压缩编码">图像压缩编码</h3><h4 id="熵编码">熵编码</h4><p>无损编码、针对信息熵冗余</p><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16986569506871698656949796.png"></p><p>变字长编码原理：如果码字长度严格按照符号概率大小的相反顺序，得到的平均码字长度一定是最小的</p><h3 id="Huffman-编码">Huffman 编码</h3><ol><li>合并：按照概率大小顺序排列，每次将<strong>概率最小</strong>的概率相加</li><li>置换：将合并吼的看成是一个新符号的概率</li><li>类推：重复上述做法，直到剩下两个符号概率</li><li>幅值和反推，每个分支分别赋 1,0 （可以概率大的赋 1，概率小的赋 0）</li></ol><p>编码效率=信息熵/编码后平均长度</p><h3 id="Huffman-码特点">Huffman 码特点</h3><ol><li>三大缺点<ol><li>码率变化，（变字场）</li><li>均匀分布的概率模型效率低</li><li>概率模型是可以变化的</li></ol></li><li>两个优点<ol><li>时间短</li><li>非歧义</li></ol></li></ol><h3 id="算术编码">算术编码</h3><p>也是对概率大的符号赋予短码，但是编码过程和 Huffman 编码不同，且在信源概率分布均匀情况下编码效率更高。<br>Huffman 码是用整数长度的码字来编码的最佳方法,而算法编码是一种并不局限于整数长度码字的最佳编码方法。<br>原理：使用二进制，考虑累积概率。算法编码产生的码字实际上是一个二进制数值的指针，指向所编符号对应的概率区间(约定指向左端点)</p><h4 id="编码基本法则">编码基本法则</h4><p>两个参量：编码点 C 和区间宽度 A<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.643ex;" xmlns="http://www.w3.org/2000/svg" width="51.234ex" height="2.417ex" role="img" focusable="false" viewBox="0 -784.1 22645.5 1068.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,34.1)"><g data-mml-node="mtd"></g><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-176.7) scale(0.707)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">新</text></g></g><g data-mml-node="mo" transform="translate(1782.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2838.7,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-176.7) scale(0.707)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">原</text></g></g><g data-mml-node="mo" transform="translate(4566,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(5566.2,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">原</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">区</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g></g><g data-mml-node="mo" transform="translate(8742.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(9743,0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mtext" transform="translate(10711.9,0)"><path data-c="A0" d=""></path></g></g><g data-mml-node="mtd" transform="translate(12961.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">新</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">区</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g></g><g data-mml-node="mo" transform="translate(3232.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(4287.9,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">原</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">区</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g></g><g data-mml-node="mo" transform="translate(7464.4,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(8464.6,0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mtext" transform="translate(9433.6,0)"><path data-c="A0" d=""></path></g></g></g></g></g></g></svg></mjx-container></p><h4 id="解码基本法则">解码基本法则</h4><p>采取和编码相反的步骤<br>从第一个区间开始，寻找字符串指向的子区间，得到第一个符号<br>减去原编码点除以区间宽度，得到新码字符串<br>之后符号以此类推</p><h3 id="二进制算数编码">二进制算数编码</h3><p>输入字符只有两种，如果信源字符集含有多个字符，先经过一些列二进判决，变成二进制字符串。和算术编码原理类似，不断划分概率子区间的递归过程<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16986604056871698660405345.png"><br><strong>编码输出可以是最后一个编码区间中的任意数值，选择最短的比特长度。但是截断需要提供编码次数</strong></p><h3 id="率失真">率失真</h3><p>率失真理论旨在寻求一种联系定长编码的失真度与编码数据率的方法。<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16992647581531699264757313.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 数字音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rhythm, Tempo, and Beat Tracking</title>
      <link href="/2023/10/26/Rhythm-Tempo-and-Beat-Tracking/"/>
      <url>/2023/10/26/Rhythm-Tempo-and-Beat-Tracking/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Novelty-Function">Novelty Function</h2><p>为了检测音符的开始，我们希望定位信号瞬态区域开始的突然变化，但是考虑到音高的变化不仅仅涉及响度的变化，也可能只涉及频率的改编（比如小提琴的演奏），所以，接下来我们介绍基于能量和基于频谱的 <strong>Novelty Function</strong></p><h3 id="Energy-based-Novelty-Functions">Energy-based Novelty Functions</h3><h4 id="通过均方根能量计算">通过均方根能量计算</h4><p>主要涉及到的步骤：直接计算 RMSE 能量、求取 RMSE 的变化量（体现能量变化），对 delta RMSE 做半波整流，只保留能量增加部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接计算 RMSE 能量</span></span><br><span class="line">y_rms =librosa.feature.rms(y=y, frame_length=frame_length, hop_length=hop_length).flatten() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算差分</span></span><br><span class="line">rmse_diff = numpy.zeros_like(rmse)</span><br><span class="line">rmse_diff[<span class="number">1</span>:] = numpy.diff(rmse)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 半波整流</span></span><br><span class="line">energy_novelty = numpy.<span class="built_in">max</span>([numpy.zeros_like(rmse_diff), rmse_diff], axis=<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出图像并比较</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(t, rmse, <span class="string">&#x27;b--&#x27;</span>, t, rmse_diff, <span class="string">&#x27;g--^&#x27;</span>, t, energy_novelty, <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, t.<span class="built_in">max</span>())</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Time (sec)&#x27;</span>)</span><br><span class="line">plt.legend((<span class="string">&#x27;RMSE&#x27;</span>, <span class="string">&#x27;delta RMSE&#x27;</span>, <span class="string">&#x27;energy novelty&#x27;</span>)) </span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16983115624001698311561925.png"                        alt=""                 ></p><h4 id="对数能量">对数能量</h4><p>人类对声音强度的感知本质上是对数的。为了解释这一性质，我们可以在进行一阶差分之前对能量应用对数函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_rmse = numpy.log1p(<span class="number">10</span>*rmse)</span><br></pre></td></tr></table></figure><p>其余过程同上</p><h3 id="Spectrum-based-Novelty-Functions">Spectrum-based Novelty Functions</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spectral_novelty = librosa.onset.onset_strength(y=x, sr=sr) <span class="comment"># 使用谱通量计算新奇函数</span></span><br></pre></td></tr></table></figure><p>具体来说，<code>librosa.onset.onset_strength</code> 函数使用一种称为&quot;onset strength&quot; 的算法来计算这个信号。这个算法的目标是识别出音频信号中的突出事件，通常与音符、鼓击或其他音乐性事件的开始时刻相关</p><h2 id="Peak-computing-峰值计算">Peak computing 峰值计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">peak_pick</span>(<span class="params">x, pre_max, post_max, pre_avg, post_avg, delta, wait</span>):</span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;Uses a flexible heuristic to pick peaks in a signal.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        A sample n is selected as a peak if the corresponding x[n]</span></span><br><span class="line"><span class="string">        fulfills the following three conditions:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1. `x[n] == max(x[n - pre_max:n + post_max])`</span></span><br><span class="line"><span class="string">        2. `x[n] &gt;= mean(x[n - pre_avg:n + post_avg]) + delta`</span></span><br><span class="line"><span class="string">        3. `n - previous_n &gt; wait`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        where `previous_n` is the last sample picked as a peak (greedily).</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这是一个用于在信号中选择峰值（peaks）的函数，它采用了一种灵活的启发式方法。函数根据给定的条件选择信号中的峰值，这些条件旨在确保所选峰值具有一定的显著性和特定的时间间隔。让我解释每个条件的含义：</p><ol><li><p><code>x[n] == max(x[n - pre_max:n + post_max])</code>：这表示在信号 <code>x</code> 中，一个样本 <code>n</code> 被选为峰值，如果它等于在前 <code>pre_max</code> 个样本和后 <code>post_max</code> 个样本范围内的样本中的最大值。这确保了所选的峰值是局部最大值。</p></li><li><p><code>x[n] &gt;= mean(x[n - pre_avg:n + post_avg]) + delta</code>：这表示在信号 <code>x</code> 中，一个样本 <code>n</code> 被选为峰值，如果它的值大于或等于在前 <code>pre_avg</code> 个样本和后 <code>post_avg</code> 个样本范围内的样本的平均值再加上 <code>delta</code>。这个条件确保了所选的峰值比周围的平均值要显著。</p></li><li><p><code>n - previous_n &gt; wait</code>：这个条件用于确保两个峰值之间有足够的时间间隔。 <code>n</code> 表示当前样本，<code>previous_n</code> 表示前一个已选择的峰值的样本。这个条件要求两个峰值之间的时间间隔至少为 <code>wait</code> 个样本。</p></li></ol><p>因此，这个函数根据以上三个条件来选择信号中的峰值。这种方法可以用于从信号中提取出显著的峰值，例如，用于检测音频信号中的音符开始或其他信号中的突出事件。这种方法是一种启发式方法，可以根据应用的需求进行调整。</p><h2 id="Onset-detection">Onset detection</h2><p>(原理和上面类似)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onset_frames = librosa.onset.onset_detect(y=x, sr=sr, wait=<span class="number">1</span>, pre_avg=<span class="number">1</span>, post_avg=<span class="number">1</span>, pre_max=<span class="number">1</span>, post_max=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(onset_frames) <span class="comment"># frame numbers of estimated onsets</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[output]:[ 20  29  38  57  65  75  84  93 103 112 121 131 140 148 158 167 176 185 204 213 232 241 250 260 268 278 288]</span><br></pre></td></tr></table></figure><p><code>librosa.onset.onset_strength</code> 和 <code>librosa.onset.onset_detect</code> 都是 Librosa 库中用于检测音频信号中的音符开始和强度的函数，但它们的功能和使用方式有一些不同。</p><ol><li><p><code>librosa.onset.onset_strength</code>:</p><ul><li>功能：该函数计算音频信号的&quot;onset strength&quot; 或 “onset envelope”，即在时间上表示音频信号中的突出事件的信号。这个信号通常用于后续的音频事件检测。</li><li>参数：通常需要传递音频信号 <code>y</code> 和采样率 <code>sr</code> 作为参数，还可以提供其他参数来调整计算过程，例如 <code>hop_length</code> 和 <code>aggregate</code>.</li><li>返回值：函数返回一个代表<strong>音频信号强度</strong>的一维数组。</li></ul></li><li><p><code>librosa.onset.onset_detect</code>:</p><ul><li>功能：这个函数使用 <code>librosa.onset.onset_strength</code> 的输出（或其他类似的音频强度信号）来检测音符开始或音频事件的时刻。它通过分析 “onset strength” 信号来查找潜在的音符开始时刻，并返回这些时刻的帧索引或时间。</li><li>参数：通常需要传递音频强度信号（如通过 <code>librosa.onset.onset_strength</code> 计算得到的）作为参数，以及一些其他参数，如 <code>hop_length</code>、<code>backtrack</code> 等，来调整检测过程。</li><li>返回值：函数返回一个包含<strong>音符开始时刻的帧索引或时间</strong>的一维数组。</li></ul></li></ol><p>总的来说，<code>librosa.onset.onset_strength</code> 用于计算音频信号的强度信号，而 <code>librosa.onset.onset_detect</code> 用于在强度信号上检测音符开始或音频事件的时刻。通常，它们一起使用，首先计算强度信号，然后使用 <code>librosa.onset.onset_detect</code> 来找到音符开始时刻。这种分离的方式允许更大的灵活性，因为您可以尝试不同的参数和强度信号来适应不同的音频分析任务。</p><h3 id="Onset-detection-with-backtracking">Onset detection with backtracking</h3><p>在很多情况中，考虑到音符改变不是瞬时完成，信号能量从平稳到峰值是有一个过程的，为避免检测 onset 时将 onset 从峰值切开，我们令参数 <code>backtrack = True</code>，实现对前面局部最值的回溯，可以确保能量变化的完整记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onset_frames = librosa.onset.onset_detect(y=x, sr=sr, hop_length=hop_length, backtrack=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Music Information Retrieval </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐信息检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Signal Analysis and Feature Extraction</title>
      <link href="/2023/10/20/Signal-Analysis-and-Feature-Extraction/"/>
      <url>/2023/10/20/Signal-Analysis-and-Feature-Extraction/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本特征提取">基本特征提取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制波形</span></span><br><span class="line">librosa.display.waveshow([x[:<span class="number">1000</span>]])</span><br><span class="line"><span class="comment"># 特征提取：过零率/质心</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_features</span>(<span class="params">signal</span>):</span><br><span class="line">    stft_signal = librosa.core.stft(signal)</span><br><span class="line">    magnitude = numpy.<span class="built_in">abs</span>(stft_signal)</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">    librosa.feature.zero_crossing_rate(signal)[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    librosa.feature.spectral_centroid(S=magnitude)[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p><strong>零交叉率（Zero Crossing Rate）</strong>：零交叉率是一个表示信号快速变化的特征。它指的是信号波形穿过零轴的次数。在这段代码中，通过 librosa.feature.zero_crossing_rate(signal) [0, 0]来计算音频信号的零交叉率，并将结果作为特征之一返回。</p><p><strong>频谱质心（Spectral Centroid）</strong>：频谱质心是频谱能量的加权平均值，用于表示音频信号的频谱中心。频谱质心越高，表示频谱的能量集中在较高的频率上，反之亦然。在这段代码中，通过 librosa.feature.spectral_centroid(S=magnitude) [0, 0]来计算音频信号的频谱质心，并将结果作为特征之一返回。</p><h2 id="Feature-Scaling-特征缩放">Feature Scaling 特征缩放</h2><p>我们在上一个示例中使用的特征包括过零率和谱质心。这两个特征使用不同的单位来表示。这种差异可能会在稍后执行分类时带来问题。因此，我们将每个特征向量归一化到一个公共范围，并存储<strong>归一化</strong>参数以供以后使用。存在许多用于扩展功能的技术。现在，我们将使用[<code>sklearn.preprocessing.MinMaxScaler</code>]( <a class="link"   href="http://scikit-learn.org/stable/modules/" >http://scikit-learn.org/stable/modules/<i class="fas fa-external-link-alt"></i></a> generated/sklearn.preprocessing.MinMaxScaler.html)。 <code>MinMaxScaler</code> 返回一个缩放值数组，使得每个特征维度都在 -1 到 1 的范围内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feature_table = numpy.vstack((kick_features, snare_features))</span><br><span class="line"></span><br><span class="line">scaler = sklearn.preprocessing.MinmaxScaler(feature_range=(-<span class="number">1</span>,<span class="number">1</span>)) <span class="comment"># 定义一个范围在-1到1的预处理器</span></span><br><span class="line">training_features = scaler.fit_transform(feature_table)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Segmantation-分割">Segmantation 分割</h2><p>在音频处理中，通常使用恒定的帧大小和跳跃大小（即增量）一次对一帧进行操作。帧的持续时间通常选择为 10 到 100 毫秒。</p><h2 id="Segmentation-Using-Python-List-Comprehensions">Segmentation Using Python List Comprehensions</h2><p>在 Python 中，您可以使用标准的列表理解（<a class="link"   href="https://docs.python.org/2/tutorial/datastructs.html#list-com%E7%BB%8F%E7%90%86%EF%BC%89%E6%9D%A5%E6%89%A7%E8%A1%8C%E4%BF%A1%E5%8F%B7%E5%88%86%E5%89%B2%E5%B9%B6%E5%90%8C%E6%97%B6%E8%AE%A1%E7%AE%97" >https://docs.python.org/2/tutorial/datastructs.html#list-com经理）来执行信号分割并同时计算<i class="fas fa-external-link-alt"></i></a> RMSE。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义帧长和间隔</span></span><br><span class="line">frame_length = <span class="number">1024</span></span><br><span class="line">hop_length = <span class="number">512</span></span><br><span class="line"><span class="comment"># 均方根</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RMSE</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> numpy.sqrt(numpy.mean(x**<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>给定一个信号，[<code>librosa.util.frame</code>]( <a class="link"   href="https://librosa.github.io/librosa/" >https://librosa.github.io/librosa/<i class="fas fa-external-link-alt"></i></a> generated/librosa.util.frame.html #librosa .util.frame)将生成一个统一大小的帧列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frames = librosa.util.frame(x, frame_length=frame_length, hop_length=hop_length)</span><br></pre></td></tr></table></figure><h1>Energy 能量</h1><p>信号的<strong>能量</strong>（[Wikipedia]( <a class="link"   href="https://en.wikipedia.org/wiki/Energy_" >https://en.wikipedia.org/wiki/Energy_<i class="fas fa-external-link-alt"></i></a> (signal_processing%29); FMP, p. 66）对应于信号的总幅度。对于音频信号，大致对应于信号的响度。信号中的能量定义为 $$ \sum_n \left| x(n) \right|^2 $$</p><p>The <strong>root-mean-square energy (RMSE)</strong> in a signal is defined as</p><p>$$ \sqrt{ \frac{1}{N} \sum_n \left| x(n) \right|^2 } $$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照定义</span></span><br><span class="line">energy = numpy.array([</span><br><span class="line">    <span class="built_in">sum</span>(<span class="built_in">abs</span>(x[i:i+frame_length]**<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x), hop_length)</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 利用librosa函数</span></span><br><span class="line">rmse = librosa.feature.rmse(x, frame_length=frame_length, hop_length=hop_length, center=<span class="literal">True</span>) <span class="comment"># shape(1,194)</span></span><br><span class="line">rmse = rmse[<span class="number">0</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较波形图和均方根能量</span></span><br><span class="line">frames = <span class="built_in">range</span>(<span class="built_in">len</span>(energy))</span><br><span class="line">t = librosa.frames_to_time(frames, sr=sr, hop_length=hop_length)</span><br><span class="line">librosa.display.waveshow(x, sr=sr, alpha=<span class="number">0.4</span>)</span><br><span class="line">plt.plot(t, energy/energy.<span class="built_in">max</span>(), <span class="string">&#x27;r--&#x27;</span>)             <span class="comment"># normalized for visualization</span></span><br><span class="line">plt.plot(t[:<span class="built_in">len</span>(rmse)], rmse/rmse.<span class="built_in">max</span>(), color=<span class="string">&#x27;g&#x27;</span>) <span class="comment"># normalized for visualization</span></span><br><span class="line">plt.legend((<span class="string">&#x27;Energy&#x27;</span>, <span class="string">&#x27;RMSE&#x27;</span>))</span><br></pre></td></tr></table></figure><h1>Zero Crossing Rate 过零率</h1><p>过零率指代信号波形穿过零轴的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n0 = <span class="number">6500</span></span><br><span class="line">n1 = <span class="number">7500</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">5</span>))</span><br><span class="line">plt.plot(x[n0:n1]) <span class="comment"># zoom in</span></span><br><span class="line"></span><br><span class="line">zero_crossings = librosa.zero_crossings(x[n0:n1], pad=<span class="literal">False</span>) <span class="comment"># 是否经过零点，输出结果为False和True的组合</span></span><br><span class="line">zeor_crossings.shape <span class="comment"># output: (1000,0)</span></span><br><span class="line"></span><br><span class="line">zcrs = librosa.feature.zero_crossing_rate(x) <span class="comment"># 过零率</span></span><br><span class="line"><span class="built_in">print</span>(zcrs.shape) <span class="comment"># output: (1,97)</span></span><br></pre></td></tr></table></figure><p>过零率的高低与信号波形的特性有关。以下是一些常见的情况：</p><p><strong>浊音/有谐波声音</strong>：浊音指的是声音中含有频谱中的多个谐波分量，通常听起来比较富有音色。浊音的过零率较低，因为在谐波声音中，波形会频繁穿过零线。</p><p><strong>清音/无谐波声音</strong>：清音指的是声音中几乎没有谐波成分，通常听起来比较纯净。清音的过零率较高，因为在没有谐波的声音中，波形变化相对较平缓，不会频繁穿过零线。</p><p><strong>静音</strong>：静音时，信号波形处于零线附近，过零率较高，因为信号在静音状态时频繁地从正值到负值或从负值到正值。</p><h1>傅立叶变换</h1><p>傅里叶变换(<a class="link"   href="https://en.wikipedia.org/wiki/Fourier_transform" >维基百科<i class="fas fa-external-link-alt"></i></a>)是应用数学和信号处理中最基本的运算之一。</p><p>它将时域信号转换到频域。时域将信号表示为一系列采样，而频域将信号表示为不同幅度、频率和相位偏移的正弦波的叠加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x,sr = librosa.load(<span class="string">&#x27;filename&#x27;</span>) <span class="comment"># 加载音频</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = scipy.fft(x) <span class="comment"># 求傅立叶变换</span></span><br><span class="line">X_mag = numpy.absolute(X) <span class="comment"># 求模</span></span><br><span class="line">f = numpy.linspace(<span class="number">0</span>, sr, <span class="built_in">len</span>(X_mag)) <span class="comment"># frequency variable 频率范围</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>, <span class="number">5</span>))</span><br><span class="line">plt.plot(f, X_mag) <span class="comment"># magnitude spectrum</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Frequency (Hz)&#x27;</span>)</span><br></pre></td></tr></table></figure><h1>Short-Time Fourier Transform STFT 短时傅里叶变换</h1><p>音乐信号是高度非平稳性的，也就是说，它们的统计数据会随着时间而变化。在一整首10分钟的歌曲中计算一次傅里叶变换是毫无意义的。</p><p><strong>短时傅里叶变换(STFT)</strong>(<a class="link"   href="https://en.wikipedia.org/wiki/Short-time%EF%BC%BFFourier%EF%BC%BFtransform" >维基百科<i class="fas fa-external-link-alt"></i></a>;FMP，第 53 页)是通过计算信号中连续帧的傅里叶变换得到的。</p><p>$$ X(m, \omega) = \sum_n x(n) w(n-m) e^{-j \omega n} $$</p><p>当我们增加 $m$ 时，我们将窗口函数 $w$ 向右滑动。对于得到的坐标系，$x(n) w(n-m)$，我们计算傅里叶变换。因此，STFT $X$ 是时间 $m$ 和频率 $ω$ 的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hop_length = <span class="number">512</span></span><br><span class="line">n_stft = <span class="number">1024</span> <span class="comment"># 设定STFT参数，包括帧长度和间隔</span></span><br><span class="line">X = librosa.stft(x, n_fft=n_fft, hop_length=hop_length)</span><br></pre></td></tr></table></figure><h2 id="Spectrogram-谱图">Spectrogram 谱图</h2><p>在音乐处理中，我们通常只关心谱幅值而不关心相位含量。</p><p><strong>谱图</strong>(<a class="link"   href="https://en.wikipedia.org/wiki/Spectrogram" >维基百科<i class="fas fa-external-link-alt"></i></a>;FMP(第 29、55 页)显示了频率随时间的强度。谱图就是 STFT 的平方幅度:</p><p>$$ S(m, \omega) = \left| X(m, \omega) \right|^2 $$</p><p>人类对声音强度的感知是基于对数（logarithmic）的，所以我们对对数幅度更感兴趣</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">S =  librosa.amplitude_to_db(<span class="built_in">abs</span>(X)) <span class="comment"># 转化为对数</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize = (<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">librosa.display.specshow(S, sr=sr, hop_length=hop_length, x_axis=<span class="string">&#x27;time&#x27;</span>, y_axis=<span class="string">&#x27;linear&#x27;</span>) <span class="comment"># 使用specshow函数</span></span><br><span class="line">plt.colorbar(<span class="built_in">format</span>=<span class="string">&#x27;%+2.0f dB&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Constant-Q-Transform-常数-Q-变换">Constant -Q Transform 常数 Q 变换</h2><p>与傅立叶变换不同，但类似于 MEL 比例，常量 Q 变换(<a class="link"   href="http://en.wikipedia.org/wiki/Constant_Q_transform" >Wikipedia<i class="fas fa-external-link-alt"></i></a>)使用对数间隔的频率轴。</p><p><strong>Constant -Q  Transform</strong> (CQT)是一种在频率上<strong>使用不同的频率分辨率</strong>来表示音频信号的方法，它模拟了人类听觉系统对不同音高的感知尺度。通过 CQT 变换，我们可以将音频信号转换为频谱表示，其中横轴表示时间，纵轴表示音高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fmin = librosa.midi_to_hz(<span class="number">36</span>) <span class="comment"># 设定最低频率</span></span><br><span class="line">C = librosa.cqt(x, sr=sr, fmin=fmin, n_bins=<span class="number">72</span>) </span><br><span class="line">logC = librosa.amplitude_to_db(<span class="built_in">abs</span>(C)) <span class="comment"># 转换为对数谱</span></span><br></pre></td></tr></table></figure><p>参数解释：</p><p><code>fmin</code> 是 CQT 变换的最低频率，表示变换时使用的最低音高。较低的 fmin 值将使 CQT 对低音更敏感。</p><p><code>n_bins</code> 表示频率的总数量，它决定了 CQT 变换的音高范围和频率分辨率。N_bins 越大，音高范围越宽，频率分辨率越高。</p><h2 id="Chroma">Chroma</h2><p><strong>(Chroma Vector) 色度向量</strong>(<a class="link"   href="https://en.wikipedia.org/wiki/Chroma_feature" >Wikipedia<i class="fas fa-external-link-alt"></i></a>)(fmp，p.123)通常是12个元素的特征向量，指示信号中存在每个基音类别{C，C#，D，D#，E，…，B}的多少能量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chromagram01 = librosa.feature.chroma_stft(y=x, sr=sr, hop_length=hop_length) <span class="comment"># stft的色度向量 </span></span><br><span class="line">chromagram02 = librosa.feature.chroma_cqt(y=x, sr=sr, hop_length=hop_length) <span class="comment"># cqt的色度向量</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line">librosa.display.specshow(chromagram, x_axis=<span class="string">&#x27;time&#x27;</span>, y_axis=<span class="string">&#x27;chroma&#x27;</span>, hop_length=hop_length, cmap=<span class="string">&#x27;coolwarm&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16907236562081690723655380.png"                        alt="16907236562081690723655380.png"                 ></p><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16907237542071690723753610.png"                        alt="16907237542071690723753610.png"                 ></p><p><strong>色度能量归一化统计量(Chroma energy normalized statistics, CENS)</strong>。CENS 功能的主要思想是对大窗口进行统计，以平滑节奏、清晰度和音乐装饰(如颤音和弦)的局部偏差。CENS 最适合用于<strong>音频匹配和相似性</strong>等任务。<code>librosa.feature.chroma_cens()</code></p><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16907238742061690723873877.png"                        alt="16907238742061690723873877.png"                 ></p><h1>Magnitude_scaling 振幅缩放（？）</h1><p>通常，信号在时域或频域中的原始幅度与人类的感知相关性不如转换成其他单位的幅度，例如使用对数标度。</p><p>即使振幅呈指数增长，对我们来说，响度的增加似乎是渐进的。这种现象是 Weber-Fechner 定律(<a class="link"   href="https://en.wikipedia.org/wiki/Weber%E2%80%93Fechner_law" >维基百科<i class="fas fa-external-link-alt"></i></a>)的一个例子，该定律指出刺激和人类感知之间的关系是对数的。</p><h1>Spectral Features 频谱特征</h1><p>对于分类问题，我们将使用新的统计量矩（Moment）（包括质心、带宽、偏度、峰度）和其他谱统计数据。</p><p>矩（Moment）是物理学和统计学中出现的术语。矩的两个示例：均值和方差，第一个是原点矩，第二个是中心矩。</p><h2 id="频谱质心">频谱质心</h2><p><strong>频谱质心</strong>（<a class="link"   href="https://en.wikipedia.org/wiki/Spectral_centroid" >维基百科<i class="fas fa-external-link-alt"></i></a>）指示频谱能量集中在哪个频率。这就像加权平均值： $$ f_c = \frac{\sum_k S(k) f(k)}{\sum_k S(k)} $$ 其中 $S(k)$ 是频率 bin $ 处的频谱幅度 k$, $f(k)$ 是 bin $k$ 处的频率。</p><p>[<code>librosa.Feature.Spectral_centroid</code>]( <a class="link"   href="https://librosa.github.io/librosa/" >https://librosa.github.io/librosa/<i class="fas fa-external-link-alt"></i></a> generated/librosa.Feature.Spectral_centroid.Html #librosa .feature.Spectral_centroid) 计算信号中每个帧的光谱质心.</p><p>输出图像：</p><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16907725302121690772529334.png"                        alt="16907725302121690772529334.png"                 ></p><p>与过零率类似，信号开始处的频谱质心存在虚假上升。这是因为开始时的静默幅度很小，高频成分有机会占主导地位。解决这个问题的一种方法是在计算光谱质心之前添加一个小常数，从而在安静部分将质心移向零。</p><h2 id="频谱带宽">频谱带宽</h2><p>[<code>librosa.feature.spectral_bandwidth</code>]( <a class="link"   href="https://librosa.github.io/librosa/" >https://librosa.github.io/librosa/<i class="fas fa-external-link-alt"></i></a> generated/librosa.feature.spectral_bandwidth.html #librosa .feature.spectral_bandwidth) 计算 $p$ 阶光谱带宽：</p><p>$$ \left( \sum_k S(k) \left(f(k) - f_c \right)^p \right)^{\frac{1}{p}} $$ 其中 $S(k)$ 是在频率 $k$ 处的幅度，$f(k)$ 是 $k$ 处的频率，$f_c$ 是频谱质心。当 $p = 2$ 时，这就像加权标准差。</p><h2 id="频谱对比度">频谱对比度</h2><p>考虑频谱峰值、谷值以及他们在每个频率子带中的差异。</p><p>[<code>librosa.feature.spectral_contrast</code>]( <a class="link"   href="https://librosa.github.io/librosa/" >https://librosa.github.io/librosa/<i class="fas fa-external-link-alt"></i></a> generated/librosa.feature.spectral_contrast.html) 计算每个时间帧的六个子带的光谱对比度：</p><h2 id="频谱滚降">频谱滚降</h2><p>是指低于总频谱能量指定百分比的频率</p><p><code>lirosa.feature.spectral_rolloff</code></p><h1>Autocorrelation 自相关</h1><p>指代自身和时移后自身的相关性。对于信号 $x$，它的自相关信号 $r(k)$ 为</p><p>$$ r(k) = \sum_n x(n) x(n-k) $$</p><p>在此等式中，$k$ 通常称为 <strong>lag</strong> 参数。 $r(k)$ 在 $k = 0$ 处最大化，并且关于 $k$ 对称。</p><p>自相关对于查找信号中的重复模式很有用。例如，在短滞后时，自相关可以告诉我们有关信号基频的信息。对于较长的滞后，自相关可以告诉我们一些有关音乐信号节奏的信息。</p><p>两种计算 autororrelation 的方法：<code>numpy.correlate</code> 和 <code>librosa.autocorrelation</code></p><h2 id="音高估计">音高估计</h2><p>自相关用于查找信号内的重复模式。对于音乐信号，重复模式可以对应于音高周期。因此，我们可以使用自相关函数，通过<strong>寻找最值点</strong>来估计音乐信号中的音高。</p><h1>Pitch Transcription Exercise 声调转录</h1><p>在音频信号处理中，声调转录是指将音频中的<strong>音高信息</strong>转录成对应的<strong>音符或音高表示</strong>的过程。这个过程通常涉及到分析音频信号中的频率变化和音高轮廓，从而识别出其中的音符和音高变化。</p><h2 id="准备工作：">准备工作：</h2><ul><li>导入库函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%matpltlib inline <span class="comment"># 将图像输出在notebook中而不是在新窗口</span></span><br><span class="line"><span class="keyword">import</span> numpy, IPython.display <span class="keyword">as</span> ipd, matpltlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> librosa, librosa.display</span><br><span class="line">plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (<span class="number">14</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>加载音频并播放</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;../audio/simple_piano.wav&#x27;</span></span><br><span class="line">x,sr = librosa.load(filename)</span><br><span class="line">ipd.Audio(x,rate=sr)</span><br></pre></td></tr></table></figure><ul><li>计算 CQT 并输出频谱</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bins_per_octave = <span class="number">36</span> <span class="comment"># 设置每个八度的频率间隔数目，表示频率轴分辨率</span></span><br><span class="line">cqt = librosa.cqt(x,sr=sr, n_bins=<span class="number">300</span>, bins_per_octave = bins_per_octave) <span class="comment"># 使用cqt函数</span></span><br><span class="line">log_cqt = librosa.amplitude_to_db(numpy.<span class="built_in">abs</span>(cqt)) <span class="comment">#转化对数谱</span></span><br><span class="line">librosa.display.specshow(log_cqt, sr=sr, x_axis=<span class="string">&#x27;time&#x27;</span>,</span><br><span class="line"> y_axis=<span class="string">&#x27;cqt_note&#x27;</span>, bins_per_octave=<span class="number">36</span>)</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16907872882141690787288035.png"                        alt="16907872882141690787288035.png"                 ></p><p>简单观察声谱图可知，整个音频大概包含八个相同或不同的音符，但是混杂在每一个音符的还有各种其他频率的分量。</p><h2 id="任务目标">任务目标</h2><p>识别每个音符的音高，并将每个音符用相同音调的纯音（Pure Tone）组合起来代替音频</p><h2 id="任务流程">任务流程</h2><h3 id="第一步：检测起点">第一步：检测起点</h3><p>在音频信号处理和音乐分析中，“onset”（起点）是指音频信号中音乐或声音的开始部分，即音频信号开始出现显著能量变化的位置。换句话说，“onset” 表示音频信号中从无声到有声或从背景噪声到音乐开始的那个时间点。</p><p>在音频信号处理中，通常使用不同的算法和特征来检测 “onset”，比如短时能量、短时过零率、梅尔频率倒谱系数（MFCC）等。这些方法可以帮助准确地找到音频信号中显著的能量变化点，从而确定 “onset” 的位置。</p><p>在这里，我们使用新颖度函数（novelty function）来寻找音频信号中的起点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hop_length = <span class="number">100</span></span><br><span class="line">onset_env = librosa.onset.onset_strength(y=x, sr=sr, hop_length=hop_length)</span><br><span class="line">plt.plot(onset_env)</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="built_in">len</span>(onset_env))</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16907876922071690787691364.png"                        alt="16907876922071690787691364.png"                 ></p><p>在上图可以看到，除了几个比较显著的波峰，还有更多的很小的波峰，我们需要设置参数来忽略这些很小的波峰。</p><p>接下来使用 <code>onset_detct</code> 实现对起点的检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onset_samples = librosa.onset.onset_detect(y=x,</span><br><span class="line">                                           sr=sr, units=<span class="string">&#x27;samples&#x27;</span>, </span><br><span class="line">                                           hop_length=hop_length, </span><br><span class="line">                                           backtrack=<span class="literal">False</span>,</span><br><span class="line">                                           pre_max=<span class="number">20</span>,</span><br><span class="line">                                           post_max=<span class="number">20</span>,</span><br><span class="line">                                           pre_avg=<span class="number">100</span>,</span><br><span class="line">                                           post_avg=<span class="number">100</span>,</span><br><span class="line">                                           delta=<span class="number">0.2</span>,</span><br><span class="line">                                           wait=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(onset_samples)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output:[5800 11300 22300 33300 44300 55300 66400]</span><br></pre></td></tr></table></figure><p>为了能将整个音频按照音符数分割开来，还要在序列首尾添加 <code>padding</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onset_boundaries = numpy.concatenate([[<span class="number">0</span>], onset_samples, [<span class="built_in">len</span>(x)]])</span><br><span class="line"><span class="built_in">print</span>(onset_boundaries)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output:[0  5800 11300 22300 33300 44300 55300 66400 84928]</span><br></pre></td></tr></table></figure><p>最后将采样点数转换为时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onset_times = librosa.samples_to_time(onset_boundaries,sr=sr)</span><br><span class="line"><span class="built_in">print</span>(onset_times)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">array(array([ 0.        ,  0.26303855,  0.51247166,  1.01133787,  1.51020408,2.00907029,  2.50793651,  3.01133787,  3.85160998]))</span><br></pre></td></tr></table></figure><p>最后将分割后的结果在频谱图中展示出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">librosa.display.waveshow(x,sr=sr)</span><br><span class="line">plt.vlines(onset_times,-<span class="number">1</span>,<span class="number">1</span>,color=<span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16907894122071690789411700.png"                        alt="16907894122071690789411700.png"                 ></p><p>经过上面的操作，我们可以看懂，红线将整个将音频中八个音符，对应波形中有明显不连续的地方分割开来。</p><h2 id="第二步，估计音调">第二步，估计音调</h2><p>我们效仿前面的学习内容，使用<strong>自相关方法</strong>确定音高。</p><blockquote><p><strong>自相关</strong>用于查找信号内的重复模式。对于音乐信号，重复模式可以对应于音高周期。因此，我们可以使用自相关函数，通过<strong>寻找最值点</strong>来估计音乐信号中的音高</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">estimate_pitch</span>(<span class="params">segment, sr, fmin=<span class="number">50.0</span>, fmax=<span class="number">2000.0</span></span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算输入的自相关</span></span><br><span class="line">    r = librosa.autocorrelate(segment)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义自相关最值点的范围</span></span><br><span class="line">    i_min = sr/fmax</span><br><span class="line">    i_max = sr/fmin</span><br><span class="line">    r[:<span class="built_in">int</span>(i_min)] = <span class="number">0</span></span><br><span class="line">    r[<span class="built_in">int</span>(i_max):] = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 寻找最值，返回对应频率</span></span><br><span class="line">    i = r.argmax()</span><br><span class="line">    f0 = <span class="built_in">float</span>(sr)/i</span><br><span class="line">    <span class="keyword">return</span> f0</span><br></pre></td></tr></table></figure><h2 id="第三步：生成纯音-Pure-Tone">第三步：生成纯音 Pure Tone</h2><p>这里我们直接使用 <code>numpy.sin</code> 生成频率固定的正弦波纯音。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_sine</span>(<span class="params">f0, sr, n_duration</span>):</span><br><span class="line"><span class="comment"># 生成正弦波</span></span><br><span class="line">    n = numpy.arange(n_duration)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.2</span>*numpy.sin(<span class="number">2</span>*numpy.pi*f0*n/<span class="built_in">float</span>(sr))</span><br></pre></td></tr></table></figure><h2 id="第四步：将纯音组合起来">第四步：将纯音组合起来</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">estimate_pitch_and_generate_sine</span>(<span class="params">x, onset_samples, i, sr</span>):</span><br><span class="line"><span class="comment"># 找到起点位置的频率，将每一音符分割开来</span></span><br><span class="line">    n0 = onset_samples[i]</span><br><span class="line">    n1 = onset_samples[i+<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用函数，估计每个音符的音高</span></span><br><span class="line">    f0 = estimate_pitch(x[n0:n1], sr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回相同音高的纯音</span></span><br><span class="line">    <span class="keyword">return</span> generate_sine(f0, sr, n1-n0)</span><br></pre></td></tr></table></figure><p>接下来使用 <code>numpy.concatenate</code> 将合成的片段连接起来并演奏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y = numpy.concatenate([</span><br><span class="line">    estimate_pitch_and_generate_sine(x, onset_boundaries, i, sr=sr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(onset_boundaries)-<span class="number">1</span>)</span><br><span class="line">])</span><br><span class="line">ipd.Audio(y,rate=sr)</span><br></pre></td></tr></table></figure><p>为可视化展现合成后音频的最终结果，绘制合成后音频的 CQT 谱图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cqt=librosa.cqt(y,sr=sr)</span><br><span class="line">librosa.display.specshow(<span class="built_in">abs</span>(cqt),sr=sr,x_axis=<span class="string">&#x27;time&#x27;</span>,y_axis=<span class="string">&#x27;cqt_mode&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16907904922071690790491649.png"                        alt="16907904922071690790491649.png"                 ></p><p>可以清晰看到，每个音符对应的频率谱图变得纯净，其他频率的分量基本完全消失。</p><p>至此，我们完成了这段音频的声调转录工作。</p>]]></content>
      
      
      <categories>
          
          <category> Music Information Retrieval </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐信息检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络训练</title>
      <link href="/2023/07/15/neural-network-training/"/>
      <url>/2023/07/15/neural-network-training/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Chapter-4-神经网络训练">Chapter 4  神经网络训练</h2><h3 id="神经网络训练">神经网络训练</h3><p>训练的过程是反向传播的过程，利用得到的输出值与预测值的偏差，（损失函数），反向更新模型中的参数</p><h3 id="逼近的思路理解训练">逼近的思路理解训练</h3><p>随机生成一个三阶函数，赋予一组随机参数，得到的输出与 sine 输出值比较，差值 loss 最小的那一组参数就为目标函数。</p><ul><li>流程：<ol><li>根据预测值和标签值得到 loss</li><li>Loss 函数对各个参数反向求偏导</li><li>计算每个参数的梯度</li><li>更新参数值</li><li>梯度置 0</li><li>再次循环</li></ol></li></ul><span id="more"></span><h4 id="反向传播">反向传播</h4><p><img                         lazyload                       alt="image"                       data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16893535815091689353580690.png"                        alt="16893535815091689353580690.png"                 ></p><h4 id="高阶函数构造-sin-x-c">高阶函数构造 sin(x) c</h4><ol><li>常规思路：loss 对各参数求偏导，计算梯度，更新梯度值，梯度置 0</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;用一个三阶函数找到合适的参数 逼近y=sinx</span></span><br><span class="line"><span class="string"># 1.构建三阶函数</span></span><br><span class="line"><span class="string"># 2.给定输入，得到该函数的输出值,共循环500次</span></span><br><span class="line"><span class="string"># 3.得到该函数的输出值与y=sinx的输出 偏差loss函数</span></span><br><span class="line"><span class="string"># 4.为了得到loss最小，求该函数的极小值（导数）</span></span><br><span class="line"><span class="string"># 5.根据梯度值，更新参数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.sine</span></span><br><span class="line">x = np.linspace(start=-np.pi,stop=np.pi,num=<span class="number">2000</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">a,b,c,d = np.random.rand(),np.random.rand(),np.random.rand(),np.random.rand()</span><br><span class="line">learning_rate = <span class="number">1e-6</span></span><br><span class="line"><span class="comment"># 学习率（learning rate）用于控制参数更新的步长。它决定了每一步更新中参数的变化量。</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200000</span>):</span><br><span class="line">    y_pred = a + b*x + c*x**<span class="number">2</span> + d*x**<span class="number">3</span></span><br><span class="line">    loss = np.square(y_pred - y).<span class="built_in">sum</span>()</span><br><span class="line">    grad_y_pre = <span class="number">2</span> * (y_pred - y)</span><br><span class="line">    grad_a = grad_y_pre.<span class="built_in">sum</span>()</span><br><span class="line">    grad_b = (grad_y_pre * x**<span class="number">1</span>).<span class="built_in">sum</span>()</span><br><span class="line">    grad_c = (grad_y_pre * x**<span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">    grad_d = (grad_y_pre * x**<span class="number">3</span>).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    a -= learning_rate * grad_a</span><br><span class="line">    b -= learning_rate * grad_b</span><br><span class="line">    c -= learning_rate * grad_c</span><br><span class="line">    d -= learning_rate * grad_d</span><br><span class="line">    <span class="comment"># 以上为求导过程</span></span><br><span class="line">    <span class="comment"># 根据链式法则，损失函数关于b的偏导数可以表示为：∂loss/∂b = ∂loss/∂y_pred * ∂y_pred/∂b</span></span><br><span class="line">    <span class="keyword">if</span> epoch%<span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># Epoch（时期）是指将整个训练数据集（dataset）通过神经网络进行前向传播和反向传播的一次完整迭代。</span></span><br><span class="line">        <span class="built_in">print</span>(loss)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;y_pred = <span class="subst">&#123;a.item()&#125;</span> + <span class="subst">&#123;b.item()&#125;</span>*x + <span class="subst">&#123;c.item()&#125;</span>*x^2 + <span class="subst">&#123;d.item()&#125;</span>*x^3&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>loss.backward():由该函数确定更新后的参数值 （这是一个 PyTorch 库中的函数，输入输出需要为张量）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;用一个三阶函数找到合适的参数 逼近y=sinx</span></span><br><span class="line"><span class="string"># 1.构建三阶函数</span></span><br><span class="line"><span class="string"># 2.给定输入，得到该函数的输出值,共循环500次</span></span><br><span class="line"><span class="string"># 3.得到该函数的输出值与y=sinx的输出 偏差loss函数</span></span><br><span class="line"><span class="string"># 4.为了得到loss最小，求该函数的极小值（导数）</span></span><br><span class="line"><span class="string"># 5.根据梯度值，更新参数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.sine</span></span><br><span class="line">x = torch.linspace(start=-torch.pi,end=torch.pi,steps=<span class="number">2000</span>)</span><br><span class="line">y = torch.sin(x)</span><br><span class="line"></span><br><span class="line">a,b,c,d = torch.rand((),requires_grad=<span class="literal">True</span>),torch.rand((),requires_grad=<span class="literal">True</span>),\</span><br><span class="line">          torch.rand((),requires_grad=<span class="literal">True</span>),torch.rand((),requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">1e-6</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    y_pred = a + b*x + c*x**<span class="number">2</span> + d*x**<span class="number">3</span></span><br><span class="line">    loss = torch.square((y_pred - y),).<span class="built_in">sum</span>()</span><br><span class="line">    debug = <span class="number">1</span></span><br><span class="line">    loss.backward() <span class="comment"># 使用该函数，代替求导的过程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        a -= learning_rate * a.grad</span><br><span class="line">        b -= learning_rate * b.grad</span><br><span class="line">        c -= learning_rate * c.grad</span><br><span class="line">        d -= learning_rate * d.grad</span><br><span class="line"></span><br><span class="line">        a.grad = <span class="literal">None</span></span><br><span class="line">        b.grad = <span class="literal">None</span></span><br><span class="line">        c.grad = <span class="literal">None</span></span><br><span class="line">        d.grad = <span class="literal">None</span></span><br><span class="line">    debug = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> epoch%<span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(loss)  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;y_pred = <span class="subst">&#123;a.item()&#125;</span> + <span class="subst">&#123;b.item()&#125;</span>*x + <span class="subst">&#123;c.item()&#125;</span>*x^2 + <span class="subst">&#123;d.item()&#125;</span>*x^3&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>optimiser.step(): 优化器函数（同上）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;用一个网络模型 逼近y=sinx</span></span><br><span class="line"><span class="string"># 1.给定输入，得到sin的输出值为y</span></span><br><span class="line"><span class="string"># 2.给定输入，根据y=a+b*x+c*x**2+d*x**3,计算^1,^2,^3不同幂次下的结果</span></span><br><span class="line"><span class="string"># 3.构建网络模型，利用线性层将不同幂次下的结果按一定权重相加，包含线性层Linear(3,1),Flatten()</span></span><br><span class="line"><span class="string"># 4.将三个结果放入模型得到该函数的输出值,共循环500-&gt;2000次</span></span><br><span class="line"><span class="string"># 4.得到该函数的输出值与y=sinx的输出,偏差loss函数= torch.square(y_pre - y).sum()</span></span><br><span class="line"><span class="string"># 5.为了得到loss最小，求该函数的极小值（导数）loss.backward()</span></span><br><span class="line"><span class="string"># 6.根据梯度值，更新参数 param -= learning_rate * param.grad 之后 model.zero_grad()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Liner</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.model = nn.Sequential(nn.Linear(<span class="number">3</span>,<span class="number">1</span>),nn.Flatten(<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,data</span>):</span><br><span class="line">        output = self.model(data)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">x = torch.linspace(-torch.pi,torch.pi,<span class="number">2_000</span>)</span><br><span class="line">y = torch.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x^1,x^2,x^3</span></span><br><span class="line">mynn = Liner()</span><br><span class="line">p = torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">input</span> = x.unsqueeze(-<span class="number">1</span>).<span class="built_in">pow</span>(p)</span><br><span class="line">learning_rate = <span class="number">1e-4</span></span><br><span class="line">optimiser = torch.optim.RMSprop(params=mynn.model.parameters(),lr=learning_rate)</span><br><span class="line">loss_fn = torch.nn.MSELoss() <span class="comment"># 代替square平方求和</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2_000</span>):</span><br><span class="line">    y_pre = mynn(<span class="built_in">input</span>)</span><br><span class="line">    loss = loss_fn(y_pre,y)</span><br><span class="line">    layer_liner = mynn.model[<span class="number">0</span>]</span><br><span class="line">    layer_flatten = mynn.model[<span class="number">1</span>]</span><br><span class="line">    debug = <span class="number">1</span></span><br><span class="line">    optimiser.zero_grad() <span class="comment"># 用于将模型参数的梯度归零。</span></span><br><span class="line">    loss.backward() <span class="comment"># 反向更新参数</span></span><br><span class="line">    optimiser.step() <span class="comment"># 优化器，代替-=的过程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">10</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(loss)</span><br><span class="line">    debug = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>需要注意：</strong><br><code>optimiser = torch.optim.RMSprop(params=mynn.model.parameters(),lr=learning_rate)</code> 定义了一个优化器，参数是模型中的各个参数，<code>lr</code> 是学习率。在机器学习和深度学习中，优化器（Optimizer）是一种用于调整模型参数以最小化损失函数的算法或方法。优化器根据模型的梯度信息和指定的优化算法，更新模型参数的值，以便使损失函数达到最小值或接近最小值。在训练神经网络模型的过程中，优化器的作用非常重要。它能够根据损失函数的梯度信息来更新模型参数，使得模型能够逐步调整自身以更好地拟合训练数据。<br><code>loss.Backward()</code> 的任务是执行反向传播计算梯度。具体来说，它计算损失函数 loss 关于模型参数的梯度，通过使用链式法则将梯度从损失函数传播到模型的每个参数。这样可以获得每个参数相对于损失函数的梯度信息，即参数的更新方向和大小。<br><code>optimiser.step()</code> 的任务是根据梯度信息更新模型参数的值。它使用优化算法（如 RMSprop）和学习率来计算参数的更新量，并将这个更新量应用到模型的参数上，从而更新参数的值。这样，模型的参数会朝着减小损失函数的方向进行调整。</p><h4 id="损失函数与优化器">损失函数与优化器</h4><ul><li>常用的损失函数<ol><li>平方损失  输出-预期的平方的求和</li><li><strong>最大似然</strong>处理，输出的结果（似然值）视为概率，再去求得到该结果概率值最大的权重系数 w。已知事情发生的结果，反推发生该结果概率最大的参数 w P(x|w,b)</li><li>交叉熵损失</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;损失函数的使用</span></span><br><span class="line"><span class="string"># 1.定义两个变量</span></span><br><span class="line"><span class="string"># 2.损失函数选择L1Loss()，参量选择 均值与取和——(P1-E1)+(P2-E2)+...(PN-EN)/N</span></span><br><span class="line"><span class="string"># 3.损失函数选择MSELoss()——(P1-E1)^2+(P2-E2)^2+...(PN-EN)^2/N</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">y_pred = torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=torch.float32)</span><br><span class="line">y = torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>],dtype=torch.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.损失函数选择L1Loss()，参量选择 均值与取和——(P1-E1)+(P2-E2)+...(PN-EN)/N</span></span><br><span class="line">loss_l1 = torch.nn.L1Loss(reduction=<span class="string">&quot;sum&quot;</span>)</span><br><span class="line">result1 = loss_l1(y_pred,y)</span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.损失函数选择MSELoss()——(P1-E1)^2+(P2-E2)^2+...(PN-EN)^2/N</span></span><br><span class="line">loss_mse = torch.nn.MSELoss(reduction=<span class="string">&quot;sum&quot;</span>)</span><br><span class="line">result2 = loss_mse(y_pred,y)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br></pre></td></tr></table></figure><ul><li>常用的优化器<ul><li>SGD</li><li>Adam</li></ul></li></ul><h4 id="构建神经网络全过程">构建神经网络全过程</h4><p>搭建+训练（Chapter 3+4）<br>下载数据-&gt;加载数据-&gt;准备模型-&gt;设置损失函数-&gt;设置优化器-&gt;开始训练-&gt;最后验证-&gt;结果聚合展示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.搭建模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mynetwork</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.model = nn.Sequential(nn.Conv2d(<span class="number">3</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>),nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">                                   nn.Conv2d(<span class="number">32</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>),nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">                                   nn.Conv2d(<span class="number">32</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>),nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">                                   nn.Flatten(),nn.Linear(<span class="number">64</span>*<span class="number">4</span>*<span class="number">4</span>,<span class="number">64</span>),nn.Linear(<span class="number">64</span>,<span class="number">10</span>))</span><br><span class="line">                                   <span class="comment"># 包括卷积、池化、线性等等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,data</span>): <span class="comment"># 前向驱动函数</span></span><br><span class="line">        output = self.model(data)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.得到数据集</span></span><br><span class="line"><span class="built_in">input</span> = torch.ones(size=(<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>),dtype=torch.float32) <span class="comment"># 数据集</span></span><br><span class="line">y = torch.tensor([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]],dtype=torch.float32)</span><br><span class="line"><span class="comment"># 3.调用模型得到输出</span></span><br><span class="line">mynn = Mynetwork()</span><br><span class="line">loss_fn = torch.nn.MSELoss(reduction=<span class="string">&quot;mean&quot;</span>) <span class="comment"># 损失函数</span></span><br><span class="line">optimiser = torch.optim.RMSprop(params=mynn.model.parameters(),lr=<span class="number">1e-4</span>) <span class="comment"># 定义优化器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> period <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;this is period <span class="subst">&#123;period+<span class="number">1</span>&#125;</span>:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">        y_pred = mynn(<span class="built_in">input</span>) <span class="comment"># 导入模型</span></span><br><span class="line">        <span class="comment"># 4.计算真实值与输出值之间的偏差loss</span></span><br><span class="line">        loss = loss_fn(y_pred,y)</span><br><span class="line">        <span class="comment"># 7.迭代一次后 梯度置零</span></span><br><span class="line">        optimiser.zero_grad()</span><br><span class="line">        <span class="comment"># 5.计算各参量的梯度值</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        <span class="comment"># 6.用优化器更新参数</span></span><br><span class="line">        optimiser.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data % <span class="number">10</span> ==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(loss)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The final outcome is <span class="subst">&#123;y_pred&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="comment"># output：</span></span><br><span class="line">this <span class="keyword">is</span> period <span class="number">1</span>:</span><br><span class="line">tensor(<span class="number">38.6425</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">2</span>:</span><br><span class="line">tensor(<span class="number">34.2981</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">3</span>:</span><br><span class="line">tensor(<span class="number">22.4355</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">4</span>:</span><br><span class="line">tensor(<span class="number">3.7360</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">5</span>:</span><br><span class="line">tensor(<span class="number">4.2519</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">6</span>:</span><br><span class="line">tensor(<span class="number">7.7438</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">7</span>:</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">tensor(<span class="number">0.1047</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">96</span>:</span><br><span class="line">tensor(<span class="number">0.1212</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">97</span>:</span><br><span class="line">tensor(<span class="number">0.0982</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">98</span>:</span><br><span class="line">tensor(<span class="number">0.1128</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">99</span>:</span><br><span class="line">tensor(<span class="number">0.0920</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">this <span class="keyword">is</span> period <span class="number">100</span>:</span><br><span class="line">tensor(<span class="number">0.1051</span>, grad_fn=&lt;MseLossBackward0&gt;)</span><br><span class="line">The final outcome <span class="keyword">is</span> tensor([[<span class="number">0.8946</span>, <span class="number">1.8333</span>, <span class="number">2.8251</span>, <span class="number">3.7509</span>, <span class="number">4.7626</span>, <span class="number">5.6981</span>, <span class="number">6.6488</span>, <span class="number">7.6014</span>, <span class="number">8.5054</span>,</span><br><span class="line">         <span class="number">9.5048</span>]], grad_fn=&lt;AddmmBackward0&gt;)</span><br></pre></td></tr></table></figure><p><code>Tensor(38.6425)</code>：这部分表示损失函数的数值，即计算得到的具体损失值。在这个例子中，损失函数的值为 38.6425。<br><code>grad_fn=&lt;MseLossBackward0&gt;</code>：这部分表示损失函数的计算图中的<strong>反向传播函数</strong>。它指示了该张量是通过执行反向传播操作计算得到的，并且在计算图中有一个与之相关的反向传播函数。在这个例子中，使用的是<strong>均方误差损失函数（MSELoss）</strong>，因此显示为 <code>&lt;MseLossBackward0&gt;。</code></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 音频信号 </tag>
            
            <tag> 声学 </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 信号处理 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【大唐杯】5G网络架构与组网部署</title>
      <link href="/2023/02/06/DT-5g-network/"/>
      <url>/2023/02/06/DT-5g-network/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>课程来源：<a class="link" href="http://dtmobile.yunxuetang.cn/kng/course/package/video/f6891000087d4267b93c238b767b3078_494a8399c8a446b78073c9d8ca865dca.html?MasterID=55b4778d-3c9a-4769-8e34-f74cc14f0563&amp;MasterType=O2OStudy&amp;taskId=55b4778d-3c9a-4769-8e34-f74cc14f0563&amp;uniqueid=1675669032400">第一章-5G网络架构与组网部署-01<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="课程目标">课程目标</h2><ul><li>5G网络整体<strong>架构</strong>组成</li><li>主要<strong>网元功能</strong></li><li>网元间<strong>接口关系</strong></li><li>了解5G网络组网<strong>部署策略</strong></li></ul><h2 id="目录">目录</h2><ul><li>1.1 5G网络架构的演进趋势</li><li>1.2 5G网元功能与接口</li><li>1.3 5G网络组网部署</li></ul><h2 id="1-1-5G网络架构的演进趋势">1.1 5G网络架构的演进趋势</h2><span id="more"></span><h3 id="概述">概述</h3><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756694609251675669460092.png"><br>5G通信系统包括 <code>5GC(5G Core Network)</code> 和 <code>NG-RAN(Next Generation Radio Access Network)</code><br><code>NG</code>接口链接核心网和接入网，实现控制面和用户面功能；<br><code>Xn</code>接口链接接入网，实现控制面和用户面功能。<br><em>接口为逻辑接口</em><br><code>gNB</code>:5G基站<br><code>ng-eNB</code>:增强4G基站<br><code>AMF/UPF/SMF</code> 核心网网元</p><hr><p>4G移动通信系统包括<code>EPC(Evolved Packet Core network),演进分组核心网</code>和<code>E-UTRAN(Evolved Universal Terrestrial Radio Access Network)演进通用陆地无线接入网络</code><br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756702849441675670284898.png"><br><code>S1</code> <code>X2</code> 接口</p><hr><p>5G 4G系统整体架构类似，区别如下：</p><ul><li>RAN网络引入 <code>CU</code> <code>DU</code> 组网灵活</li><li>MEC(Multi-access Edge Connection)多接入边缘计算是5G系统运行的关键技术，可实现5GC的部分功能，可将核心网部署在靠近基站的地方，降低时延。</li></ul><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756704969251675670496330.png"></p><ul><li><a class="link" href="https://zhuanlan.zhihu.com/p/145532668">关于前传中传回传<i class="fas fa-external-link-alt"></i></a><br>一个基站，通常包括BBU(Building Base band Unit，基带单元，主要负责信号调制)、RRU(Remote Radio Unit，主要负责射频处理)，馈线(连接RRU和天线)，天线(主要负责线缆上导行波和空气中空间波之间的转换)。4G每个基站都有一个BBU，并通过BBU直接连到核心网。<br>而在5G网络中，接入网不再是由BBU、RRU、天线这些东西组成了。而是被重构为以下3个功能实体：<br>CU(Centralized Unit，集中单元)，DU(Distribute Unit，分布单元)，AAU(Active Antenna Unit，有源天线单元)。<br>原来4G的RRU和天线合并成AAU（<strong>方便大规模天线的实现</strong>），把BBU分离成CU和DU，DU下沉（见图1-3）到AAU处，一个CU可以连接多个DU。<br>4G只有前传和回传两部分，在5G网络中则演变为三个部分，AAU连接DU部分称为5G前传（Fronthaul），中传（Middlehaul）指DU连接CU部分，而回传（Backhaul）是CU和核心网之间的通信承载。<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756734949281675673494885.png"></li></ul><hr><h3 id="1-1-1-核心网架构演进">1.1.1 核心网架构演进</h3><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756788736861675678873591.png"></p><ul><li>模拟通信：保密性差</li><li>数字通信：数字化，2.5G后可上网阶段</li><li>互联网：IP化，传输媒介发生改变，网线、光纤投入使用，设备围绕IP 端口进行，承载控制分离，网元功能细化。网业分离，分为控制面、用户面。3/4G阶段</li><li>SDN/NFV<ul><li><code>Software-defined Networking</code> 软件定义网络</li><li><code>Network Functions Virtualization</code>网络功能虚拟化，</li><li>网络架构颠覆，基于服务的网络架构，网元数量大量增加，UPF只用于 处理，控制处理分离，控制和用户完全的分离，软件硬件分离架构灵活 网元虚拟化易于操作</li><li>总结：模块化，虚拟化</li></ul></li></ul><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756793739341675679372973.png"></p><hr><p>4G核心网架构<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756796859271675679685214.png"></p><hr><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756797289251675679728241.png"></p><p>各模块基于NFC实现虚线框内，为控制面 UPF为用户面，实现用户面控制面分离。<br>各网元功能见下节</p><hr><h3 id="1-1-2-无线接入网演进">1.1.2 无线接入网演进</h3><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756854729241675685472717.png"><br>“分合分”的表象<br>CU对实时性要求不高，实时性要求高在DU实现。</p><hr><h2 id="1-2-5G网元功能与接口">1.2 5G网元功能与接口</h2><h3 id="1-2-1-5G移动通信整体网络架构">1.2.1 5G移动通信整体网络架构</h3><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756858089261675685808001.png"><br>网络功能间的信息交互基于两种方式表示：服务表示（模块名称前+N，指对外暴露的接口，多对一接口，用到服务注册和服务发现的功能，相互之间不需要知道功能所在的地址）、点对点表示（不同功能实体之间有约定好的接口，比较简单，不考虑注册和发现，但是拓展性弱）。</p><hr><p>点对点表示如下图1-9<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756873859251675687385837.png"></p><hr><ul><li><a class="link" href="https://blog.csdn.net/yao_zhuang/article/details/112298987">5GC各网元功能介绍<i class="fas fa-external-link-alt"></i></a><ul><li>AMF Access and Mobility Management Function 接入和移动性管理功能</li><li>SMF Session Management function 会话管理功能</li><li>AUSF Authentication Server Function 认证服务器功能</li><li>UPF The User plane function 用户面功能</li><li>PCF Policy Control function 策略控制功能</li><li>UDM The Unified Data Management 统一数据管理功能</li><li>NRF NF Repository Function 网元存储功能</li><li>NSSF The Network Slice Selection Function 网络切片选择</li><li>NEF Network Exposure Function 网络开放功能</li></ul></li></ul><hr><p>CU DU分离逻辑图：<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756874959311675687495876.png"><br>层与层之间的交互：<br><code>CU</code>分为 <code>CU-C</code> C控制 <code>CU-U</code> U用户<br>内部接口： F1-C F1-U，对外接口Xn-C Xn-U<br>上图不代表实际连接情况，不等于gNB等于CU+DU 具体连接关系可调节。</p><hr><p>CU DU有八种划分方式<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756886180071675688617948.png"><br>CU便于集中化管理，DU便于更大传输带宽，更低时延。<br>3GPP(3rd Generation Partnership Project)标准确定了option2</p><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756888489251675688848727.png"></p><hr><h3 id="1-2-2-5G主要网元功能">1.2.2 5G主要网元功能</h3><p>主要功能如下图：<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756892669271675689266684.png"></p><hr><p><strong>UPF（用户面功能）</strong><br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756899850301675689984959.png"><br>掌握主要功能：</p><ul><li>gNB切换的本地移动锚点（适用时）：在不同地方使用网络确保连接连通，切换前后保持不变</li><li>连接到移动通信网络的外部PDU会话点</li><li>N接口切换过程中，数据匹配路径，路由与转发</li><li>Uplink流量验证（SDF到QoS流映射）</li></ul><hr><p><strong>SMF（会话管理功能）</strong><br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756902609281675690260048.png"></p><ul><li>终端发起寻呼，接入网可以响应，进行会话的建立</li><li>终端IP地址的分配和管理</li><li>选择合适的UPF 基于策略控制用户面功能</li></ul><hr><p><strong>AMF（访问和移动性管理功能）</strong></p><ul><li>NAS信令的加密和保护</li><li>注册管理</li><li>在UE和SMF直接传输SM消息，透传信息</li></ul><hr><p><strong>gNB/en-gNB</strong></p><ul><li>CU-C (Central Unit Control plane)<ul><li>不同接口的管理和数据处理</li><li>连接管理包括：单连接 双连接 多链接 和D2D</li><li>系统内和系统间负载均衡</li><li>切片资源动态管理</li></ul></li><li>CU-U<ul><li>数据包的处理和转换</li></ul></li><li>DU<ul><li>资源调度、传输模式的转换、信道映射</li></ul></li><li>AAU-RF(RAdio Frequency)<ul><li>信号手法 Massive MIMO 大规模天线处理 频率时间同步 AAS实现机制</li></ul></li></ul><hr><h3 id="1-2-3-接口协议及功能">1.2.3 接口协议及功能</h3><p>数据传输需遵循各个协议的要求，下面是主要接口<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756906879241675690687380.png"></p><p>NG接口是接入网和核心网之间的接口，控制面和用户面分离<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756908019261675690801836.png"></p><p>NG接口控制面功能流程描述<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756910649241675691064628.png"></p><p>NG-U接口主要功能：用户面数据传送</p><hr><p>Xn接口是基站之间的接口，分为控制面用户面 Xn-C是CU-C之间的接口，Xn-U是CU-U之间的接口<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756912029261675691202097.png"></p><p>Xn-C接口功能流程描述<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756914329241675691432416.png"></p><p>Xn-U主要功能<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756914492731675691449217.png"></p><hr><p>E1接口指CU-C与CU-U接口，只有控制面接口，支持信令信息的交换<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756915219511675691521910.png"></p><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756916769241675691676603.png"></p><hr><p>F1接口是CU与DU之间的接口，支持信令交互，包括不同eNB-point的数据发送，包括控制面用户面<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756917859241675691785070.png"></p><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756918389331675691838596.png"></p><hr><p>终端和基站之间的Uu接口<br>控制面：涉及终端、基站、核心网<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756919009241675691900217.png"></p><p>NAS层属于控制面功能<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756923119251675692311371.png"></p><p>用户面：<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16756923420071675692341974.png"><br>新的协议层SDAP层：业务适配层，完成流到无线承载的QoS映射，为每个报文打上流表示</p><hr><h2 id="1-3-5G网络组网部署">1.3 5G网络组网部署</h2><h3 id="1-3-1-SA组网和NSA组网">1.3.1 SA组网和NSA组网</h3><p><code>NSA(Not standalon)</code>：非独立：终端同一时间同时连接4g 5g基站 接入4g或5g的核心网<br><code>SA(standalone)</code>：独立<br>区分根本不同：同一时间5g基站能否单独提供服务<br>原因：5g在刚刚引入时基站数量不足</p><hr><p>SA组网方案：<code>option2/5</code><br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757775973941675777596517.png"><br><code>option2</code>:5gc–gNB  <code>option5</code>:5gc–ng-eNB</p><hr><p>NAS组网部署：</p><p><code>option3</code>:4g 5g 基站合用4g核心网，控制面仅经由enb连接到epc，优势在于不必新增5G核心网，缺点是4g核心网有信令过载风险，该阶段主要解决初期的5g覆盖<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757807033861675780702508.png"><br><code>option7</code>:核心网变为5g核心网，控制网由ngenb连接到5gc，解决了4g核心网信令过载风险，主要面向5g容量需求 基站间接口变为Xn<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757812153901675781214431.png"><br><code>option4</code>:控制面由gnb连接到5gc，该阶段不仅面向5g的增强型移动带宽场景（eMBB） 大规模物联网（mMTC）和低时延高可靠连接（URLLC），是面向万物连接时代5G的多样化业务</p><blockquote><p>Ultra-Reliable and Low Latency Communications–URLLC<br>Massive MachineType Communication–mMTC<br>Enhanced Mobile Broadband–eMBB</p></blockquote><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757815473891675781547141.png"><br><code>option4/7</code> 不常用 5G核心网主要使用独立组网</p><hr><p>3GPP协议下对基站定义：</p><ul><li><code>eNB</code> 面向终端提供 E-UTRAN用户面控制面协议，通过S1接口连接EPC（4g核心网）</li><li><code>ng-eNB</code> 面向终端提供 E-UTRAN用户面控制面协议，通过NG接口连接5GC（5G核心网）</li><li><code>gNB</code> 面向终端提供NR用户面和控制面协议，通过NG接口连接到5GC</li><li><code>en-gNB</code> 面向终端提供NR用户面和控制面协议，通过S1-U接口连接到EPC的网络节点</li></ul><hr><p>SA NSA组网方案对比<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757825473861675782546459.png"></p><h3 id="1-3-2-MR-DC技术">1.3.2 MR-DC技术</h3><p>Multi-RAT Dual Connectivity 多接入网技术双连接<br>一部终端可以同时连接4G 5G网络，同时使用两个网络进行业务，此时终端需要具备至少两个MAC实体，支持双发双收。<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757832740691675783274003.png"></p><hr><p>控制面协议栈<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757838855101675783885460.png"><br>MN为主节点，SN辅节点，各自有RRC实体，可以生成要发送到终端的PDU，只有主节点才能连接到核心网</p><hr><p>用户面承载概念<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757839978951675783997280.png"><br><code>MCG(Master Cell Group)</code>:主小区组，和主节点相关呃校区<br>MCG承载的RLC实体一定落在主节点<br><code>SCG(Secondary Cell Group)</code>:辅小区组，和辅节点相关<br>SCG承载的RLC实体落在辅节点</p><p>分离承载：RLC实体既可以存在于主节点也可以存在于辅节点<br>承载可理解为用户面传递数据概念，从核心网数据经用户面传递的路径</p><blockquote><p>有了双连接的概念，就有了MCG和SCG的概念。从信令交互角度来看，UE首先发起随机接入过程的小区（Cell）所在的组（Group）就是MCG。假若5G NR基站和LTE基站一起给UE提供双连接服务，LTE作主基站，5G NR基站作辅基站，那么LTE所提供的多个小区就是MCG（Master CellGroup，主小区组），5G NR提供的多个小区就是SCG（Secondary Cell Group，辅小区组）。MCG的小区和SCG的小区应该配置成邻小区关系。<br><a class="link" href="https://baijiahao.baidu.com/s?id=1719715772936464451">5G组网MCG与SCG<i class="fas fa-external-link-alt"></i></a></p></blockquote><hr><p><code>CA(Carrier Aggregation)</code> 载波聚合<br>终端也与多个接入网网元连接，但是控制面连接仅有一个<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757845639041675784563689.png"><br><a class="link" href="https://blog.csdn.net/qq_41245381/article/details/105700029">5G NR协议栈<i class="fas fa-external-link-alt"></i></a></p><hr><h3 id="1-3-3-CU-DU组网部署">1.3.3 CU/DU组网部署</h3><p><code>CU DU AAU</code>三级配置可搭配处不同网络结构<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757850326691675785032624.png"></p><hr><p><strong>为支持eMBB的覆盖和容量需求</strong>，CU DU 分离部署，分为Macro(宏)和Micro(微)方式<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757867568931675786756509.png"><br>分离部署 两种方式相同<br>合设部署 DU+RRU-微组网部署</p><p>在密集部署条件下，联合多个DU形成基带池（时效性好），提高网络覆盖和容量，组网方式如下图<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757880139171675788013876.png"></p><p>DU CU一起部署-&gt;大带宽低时延：视频、虚拟现实<br>DU CU分离-&gt;对带宽时延要求不高：语音业务<br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757882179771675788217937.png"></p><hr><p><strong>mMTC</strong><br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757883049691675788304911.png"></p><hr><h4 id="缩略词解释">缩略词解释</h4><p><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757884468961675788446492.png"><br><img lazyload="" alt="" data-src="https://fastly.jsdelivr.net/gh/2incccc/MyTuTu@main/image/16757884638941675788463153.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 5G </tag>
            
            <tag> 通信 </tag>
            
            <tag> 大唐杯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
